# This script was generated by crazy-complete.
# crazy-complete: A tool that creates robust and reliable autocompletion scripts for Bash, Fish and Zsh.
# For more information, visit: https://github.com/crazy-complete/crazy-complete

_legendary_list_aliases() {
  local line

  command legendary alias list 2>/dev/null | {
    builtin read line
    while builtin read -r line; do
      line="${line## }"
      line="${line##-}"
      line="${line## }"
      printf "%s\n" "${line// => /$'\t'}"
    done
  }
}

_legendary_list_installed_games() {
  local line name title trash

  command legendary list-installed --tsv 2>/dev/null | {
    builtin read line
    while builtin read -r line; do
      IFS=$'\t' read -r name title trash <<< "$line"
      builtin printf "%s\\t%s\\n" "$name" "$title"
    done
  }
}

_legendary_list_available_games() {
  local line name title trash

  command legendary list --tsv 2>/dev/null | {
    builtin read line
    while builtin read -r line; do
      IFS=$'\t' read -r name title trash <<< "$line"
      builtin printf "%s\\t%s\\n" "$name" "$title"
    done
  }
}

_legendary_prefix_compreply() {
  local i prefix="$1"
  for ((i=0; i < ${#COMPREPLY[@]}; ++i)); do
    COMPREPLY[i]="$prefix${COMPREPLY[i]}"
  done
}

_legendary_parse_commandline() {
  POSITIONALS=()
  END_OF_OPTIONS=0
  POSITIONAL_NUM=0

  local cmd="root" argi arg i char trailing_chars
  local ARG_NONE=0 ARG_REQUIRED=1 ARG_OPTIONAL=2 VAR MODE

  __find_option() {
    case "$1" in "root:verify")
      case "$2" in
      esac
    esac
    case "$1" in "root:uninstall")
      case "$2" in
        --keep-files) VAR=OPT_keep_files; MODE=$ARG_NONE; return;;
        --skip-uninstaller) VAR=OPT_skip_uninstaller; MODE=$ARG_NONE; return;;
      esac
    esac
    case "$1" in "root:sync-saves")
      case "$2" in
        --skip-upload) VAR=OPT_skip_upload; MODE=$ARG_NONE; return;;
        --skip-download) VAR=OPT_skip_download; MODE=$ARG_NONE; return;;
        --force-upload) VAR=OPT_force_upload; MODE=$ARG_NONE; return;;
        --force-download) VAR=OPT_force_download; MODE=$ARG_NONE; return;;
        --save-path) VAR=OPT_save_path; MODE=$ARG_REQUIRED; return;;
        --disable-filters) VAR=OPT_disable_filters; MODE=$ARG_NONE; return;;
      esac
    esac
    case "$1" in "root:status")
      case "$2" in
        --offline) VAR=OPT_offline; MODE=$ARG_NONE; return;;
        --json) VAR=OPT_json; MODE=$ARG_NONE; return;;
      esac
    esac
    case "$1" in "root:move")
      case "$2" in
        --skip-move) VAR=OPT_skip_move; MODE=$ARG_NONE; return;;
      esac
    esac
    case "$1" in "root:list-saves")
      case "$2" in
      esac
    esac
    case "$1" in "root:list-installed")
      case "$2" in
        --check-updates) VAR=OPT_check_updates; MODE=$ARG_NONE; return;;
        --csv) VAR=OPT_csv; MODE=$ARG_NONE; return;;
        --tsv) VAR=OPT_tsv; MODE=$ARG_NONE; return;;
        --json) VAR=OPT_json; MODE=$ARG_NONE; return;;
        --show-dirs) VAR=OPT_show_dirs; MODE=$ARG_NONE; return;;
      esac
    esac
    case "$1" in "root:list-files")
      case "$2" in
        --force-download) VAR=OPT_force_download; MODE=$ARG_NONE; return;;
        --platform) VAR=OPT_platform; MODE=$ARG_REQUIRED; return;;
        --manifest) VAR=OPT_manifest; MODE=$ARG_REQUIRED; return;;
        --csv) VAR=OPT_csv; MODE=$ARG_NONE; return;;
        --tsv) VAR=OPT_tsv; MODE=$ARG_NONE; return;;
        --json) VAR=OPT_json; MODE=$ARG_NONE; return;;
        --hashlist) VAR=OPT_hashlist; MODE=$ARG_NONE; return;;
        --install-tag) VAR=OPT_install_tag; MODE=$ARG_REQUIRED; return;;
      esac
    esac
    case "$1" in "root:list")
      case "$2" in
        --platform) VAR=OPT_platform; MODE=$ARG_REQUIRED; return;;
        --include-ue) VAR=OPT_include_ue; MODE=$ARG_NONE; return;;
        -T|--third-party|--include-non-installable) VAR=OPT_third_party; MODE=$ARG_NONE; return;;
        --csv) VAR=OPT_csv; MODE=$ARG_NONE; return;;
        --tsv) VAR=OPT_tsv; MODE=$ARG_NONE; return;;
        --json) VAR=OPT_json; MODE=$ARG_NONE; return;;
        --force-refresh) VAR=OPT_force_refresh; MODE=$ARG_NONE; return;;
      esac
    esac
    case "$1" in "root:launch")
      case "$2" in
        --offline) VAR=OPT_offline; MODE=$ARG_NONE; return;;
        --skip-version-check) VAR=OPT_skip_version_check; MODE=$ARG_NONE; return;;
        --override-username) VAR=OPT_override_username; MODE=$ARG_REQUIRED; return;;
        --dry-run) VAR=OPT_dry_run; MODE=$ARG_NONE; return;;
        --language) VAR=OPT_language; MODE=$ARG_REQUIRED; return;;
        --wrapper) VAR=OPT_wrapper; MODE=$ARG_REQUIRED; return;;
        --set-defaults) VAR=OPT_set_defaults; MODE=$ARG_NONE; return;;
        --reset-defaults) VAR=OPT_reset_defaults; MODE=$ARG_NONE; return;;
        --override-exe) VAR=OPT_override_exe; MODE=$ARG_REQUIRED; return;;
        --origin) VAR=OPT_origin; MODE=$ARG_NONE; return;;
        --json) VAR=OPT_json; MODE=$ARG_NONE; return;;
        --wine) VAR=OPT_wine; MODE=$ARG_REQUIRED; return;;
        --wine-prefix) VAR=OPT_wine_prefix; MODE=$ARG_REQUIRED; return;;
        --no-wine) VAR=OPT_no_wine; MODE=$ARG_NONE; return;;
      esac
    esac
    case "$1" in "root:install")
      case "$2" in
        --base-path) VAR=OPT_base_path; MODE=$ARG_REQUIRED; return;;
        --game-folder) VAR=OPT_game_folder; MODE=$ARG_REQUIRED; return;;
        --max-shared-memory) VAR=OPT_max_shared_memory; MODE=$ARG_REQUIRED; return;;
        --max-workers) VAR=OPT_max_workers; MODE=$ARG_REQUIRED; return;;
        --manifest) VAR=OPT_manifest; MODE=$ARG_REQUIRED; return;;
        --old-manifest) VAR=OPT_old_manifest; MODE=$ARG_REQUIRED; return;;
        --delta-manifest) VAR=OPT_delta_manifest; MODE=$ARG_REQUIRED; return;;
        --base-url) VAR=OPT_base_url; MODE=$ARG_REQUIRED; return;;
        --force) VAR=OPT_force; MODE=$ARG_NONE; return;;
        --disable-patching) VAR=OPT_disable_patching; MODE=$ARG_NONE; return;;
        --download-only|--no-install) VAR=OPT_download_only; MODE=$ARG_NONE; return;;
        --update-only) VAR=OPT_update_only; MODE=$ARG_NONE; return;;
        --dlm-debug) VAR=OPT_dlm_debug; MODE=$ARG_NONE; return;;
        --platform) VAR=OPT_platform; MODE=$ARG_REQUIRED; return;;
        --prefix) VAR=OPT_prefix; MODE=$ARG_REQUIRED; return;;
        --exclude) VAR=OPT_exclude; MODE=$ARG_REQUIRED; return;;
        --install-tag) VAR=OPT_install_tag; MODE=$ARG_REQUIRED; return;;
        --enable-reordering) VAR=OPT_enable_reordering; MODE=$ARG_NONE; return;;
        --dl-timeout) VAR=OPT_dl_timeout; MODE=$ARG_REQUIRED; return;;
        --save-path) VAR=OPT_save_path; MODE=$ARG_REQUIRED; return;;
        --repair) VAR=OPT_repair; MODE=$ARG_NONE; return;;
        --repair-and-update) VAR=OPT_repair_and_update; MODE=$ARG_NONE; return;;
        --ignore-free-space) VAR=OPT_ignore_free_space; MODE=$ARG_NONE; return;;
        --disable-delta-manifest) VAR=OPT_disable_delta_manifest; MODE=$ARG_NONE; return;;
        --reset-sdl) VAR=OPT_reset_sdl; MODE=$ARG_NONE; return;;
        --skip-sdl) VAR=OPT_skip_sdl; MODE=$ARG_NONE; return;;
        --disable-sdl) VAR=OPT_disable_sdl; MODE=$ARG_NONE; return;;
        --preferred-cdn) VAR=OPT_preferred_cdn; MODE=$ARG_REQUIRED; return;;
        --no-https) VAR=OPT_no_https; MODE=$ARG_NONE; return;;
        --with-dlcs) VAR=OPT_with_dlcs; MODE=$ARG_NONE; return;;
        --skip-dlcs) VAR=OPT_skip_dlcs; MODE=$ARG_NONE; return;;
        --bind) VAR=OPT_bind; MODE=$ARG_REQUIRED; return;;
      esac
    esac
    case "$1" in "root:info")
      case "$2" in
        --offline) VAR=OPT_offline; MODE=$ARG_NONE; return;;
        --json) VAR=OPT_json; MODE=$ARG_NONE; return;;
        --platform) VAR=OPT_platform; MODE=$ARG_REQUIRED; return;;
      esac
    esac
    case "$1" in "root:import")
      case "$2" in
        --disable-check) VAR=OPT_disable_check; MODE=$ARG_NONE; return;;
        --with-dlcs) VAR=OPT_with_dlcs; MODE=$ARG_NONE; return;;
        --skip-dlcs) VAR=OPT_skip_dlcs; MODE=$ARG_NONE; return;;
        --platform) VAR=OPT_platform; MODE=$ARG_REQUIRED; return;;
      esac
    esac
    case "$1" in "root:eos-overlay")
      case "$2" in
        --path) VAR=OPT_path; MODE=$ARG_REQUIRED; return;;
        --prefix) VAR=OPT_prefix; MODE=$ARG_REQUIRED; return;;
        --app) VAR=OPT_app; MODE=$ARG_REQUIRED; return;;
      esac
    esac
    case "$1" in "root:egl-sync")
      case "$2" in
        --egl-manifest-path) VAR=OPT_egl_manifest_path; MODE=$ARG_REQUIRED; return;;
        --egl-wine-prefix) VAR=OPT_egl_wine_prefix; MODE=$ARG_REQUIRED; return;;
        --enable-sync) VAR=OPT_enable_sync; MODE=$ARG_NONE; return;;
        --disable-sync) VAR=OPT_disable_sync; MODE=$ARG_NONE; return;;
        --one-shot) VAR=OPT_one_shot; MODE=$ARG_NONE; return;;
        --import-only) VAR=OPT_import_only; MODE=$ARG_NONE; return;;
        --export-only) VAR=OPT_export_only; MODE=$ARG_NONE; return;;
        --migrate) VAR=OPT_migrate; MODE=$ARG_NONE; return;;
        --unlink) VAR=OPT_unlink; MODE=$ARG_NONE; return;;
      esac
    esac
    case "$1" in "root:download-saves")
      case "$2" in
      esac
    esac
    case "$1" in "root:crossover")
      case "$2" in
        --reset) VAR=OPT_reset; MODE=$ARG_NONE; return;;
        --download) VAR=OPT_download; MODE=$ARG_NONE; return;;
        --ignore-version) VAR=OPT_ignore_version; MODE=$ARG_NONE; return;;
        --crossover-app) VAR=OPT_crossover_app; MODE=$ARG_REQUIRED; return;;
        --crossover-bottle) VAR=OPT_crossover_bottle; MODE=$ARG_REQUIRED; return;;
      esac
    esac
    case "$1" in "root:cleanup")
      case "$2" in
        --keep-manifests) VAR=OPT_keep_manifests; MODE=$ARG_NONE; return;;
      esac
    esac
    case "$1" in "root:clean-saves")
      case "$2" in
        --delete-incomplete) VAR=OPT_delete_incomplete; MODE=$ARG_NONE; return;;
      esac
    esac
    case "$1" in "root:auth")
      case "$2" in
        --import) VAR=OPT_import; MODE=$ARG_NONE; return;;
        --code) VAR=OPT_code; MODE=$ARG_REQUIRED; return;;
        --token) VAR=OPT_token; MODE=$ARG_REQUIRED; return;;
        --sid) VAR=OPT_sid; MODE=$ARG_REQUIRED; return;;
        --delete) VAR=OPT_delete; MODE=$ARG_NONE; return;;
        --disable-webview) VAR=OPT_disable_webview; MODE=$ARG_NONE; return;;
      esac
    esac
    case "$1" in "root:alias:list")
      case "$2" in
      esac
    esac
    case "$1" in "root:alias:remove")
      case "$2" in
      esac
    esac
    case "$1" in "root:alias:rename")
      case "$2" in
      esac
    esac
    case "$1" in "root:alias:add")
      case "$2" in
      esac
    esac
    case "$1" in "root:alias")
      case "$2" in
      esac
    esac
    case "$1" in "root:activate")
      case "$2" in
        -U|--uplay) VAR=OPT_uplay; MODE=$ARG_NONE; return;;
        -O|--origin) VAR=OPT_origin; MODE=$ARG_NONE; return;;
      esac
    esac
    case "$1" in "root")
      case "$2" in
        -h|--help) VAR=OPT_help; MODE=$ARG_NONE; return;;
        -H|--full-help) VAR=OPT_full_help; MODE=$ARG_NONE; return;;
        -V|--version) VAR=OPT_version; MODE=$ARG_NONE; return;;
        -v|--debug) VAR=OPT_debug; MODE=$ARG_NONE; return;;
        -y|--yes) VAR=OPT_yes; MODE=$ARG_NONE; return;;
        -J|--pretty-json) VAR=OPT_pretty_json; MODE=$ARG_NONE; return;;
        -A|--api-timeout) VAR=OPT_api_timeout; MODE=$ARG_REQUIRED; return;;
      esac
    esac
    return 1
  }

  __append_to_array() {
    local -n arr=$1
    arr+=("$2")
  }

  for ((argi=1; argi < ${#words[@]} - 1; ++argi)); do
    arg="${words[argi]}"

    case "$arg" in
      --)
        END_OF_OPTIONS=1
        for ((++argi; argi < ${#words[@]}; ++argi)); do
          POSITIONALS[POSITIONAL_NUM++]="${words[argi]}"
        done
        break;;
      -)
        POSITIONALS[POSITIONAL_NUM++]="-";;
      --*=*)
        if __find_option "$cmd" "${arg%%=*}"
        then __append_to_array "$VAR" "${arg#*=}"
        fi;;
      --*)
        if __find_option "$cmd" "$arg"; then
          if (( MODE == ARG_REQUIRED ))
          then __append_to_array "$VAR" "${words[++argi]}"
          else __append_to_array "$VAR" "_OPT_ISSET_"
          fi
        fi;;
      -*)
        if [[ "$arg" == -*=* ]]; then
          if __find_option "$cmd" "${arg%%=*}"; then
            __append_to_array "$VAR" "${arg#*=}"
            continue
          fi
        fi

        if __find_option "$cmd" "$arg"; then
          if (( MODE == ARG_REQUIRED ));
          then __append_to_array "$VAR" "${words[++argi]}"
          else __append_to_array "$VAR" "_OPT_ISSET_"
          fi

          continue
        fi

        for ((i=1; i < ${#arg}; ++i)); do
          char="${arg:$i:1}"
          trailing_chars="${arg:$((i + 1))}"

          if __find_option "$cmd" "-$char"; then
            if (( MODE == ARG_REQUIRED )); then
              if [[ -n "$trailing_chars" ]]
              then __append_to_array "$VAR" "$trailing_chars"
              else __append_to_array "$VAR" "${words[++argi]}"
              fi
              break;
            elif (( MODE == ARG_OPTIONAL )); then
              if [[ -n "$trailing_chars" ]]
              then __append_to_array "$VAR" "$trailing_chars"
              else __append_to_array "$VAR" _OPT_ISSET_
              fi
              break;
            else
              __append_to_array "$VAR" "_OPT_ISSET_"
            fi
          fi
        done;;
      *)
        POSITIONALS[POSITIONAL_NUM++]="$arg"
        if [[ "$cmd" == "root" ]] && (( POSITIONAL_NUM == 1 )); then
          case "$arg" in
            import-game) cmd+=":import";;
            download|update|repair) cmd+=":install";;
            list-games) cmd+=":list";;
            verify-game) cmd+=":verify";;
            *) cmd+=":$arg";;
          esac
        fi

        if [[ "$cmd" == "root:alias" ]] && (( POSITIONAL_NUM == 2 )); then
          case "$arg" in
            *) cmd+=":$arg";;
          esac
        fi
        ;;
    esac
  done

  for ((; argi < ${#words[@]}; ++argi)); do
    arg="${words[$argi]}"

    case "$arg" in
      -) POSITIONALS[POSITIONAL_NUM++]="-";;
      -*);;
      *) POSITIONALS[POSITIONAL_NUM++]="$arg";;
    esac
  done
}

_legendary_exec() {
  local item desc

  while IFS=$'\t' read -r item desc; do
    if [[ "$item" == "$cur"* ]]; then
      COMPREPLY+=("$(printf '%q' "$item")")
    fi
  done < <(eval "$1")
}

_legendary() {
  local cur prev words cword split
  _init_completion -n = || return

  local END_OF_OPTIONS POSITIONALS POSITIONAL_NUM
  local -a OPT_help OPT_full_help OPT_version OPT_debug OPT_yes OPT_pretty_json OPT_api_timeout OPT_uplay OPT_origin OPT_import OPT_code OPT_token OPT_sid OPT_delete OPT_disable_webview OPT_delete_incomplete OPT_keep_manifests OPT_reset OPT_download OPT_ignore_version OPT_crossover_app OPT_crossover_bottle OPT_egl_manifest_path OPT_egl_wine_prefix OPT_enable_sync OPT_disable_sync OPT_one_shot OPT_import_only OPT_export_only OPT_migrate OPT_unlink OPT_path OPT_prefix OPT_app OPT_disable_check OPT_with_dlcs OPT_skip_dlcs OPT_platform OPT_offline OPT_json OPT_base_path OPT_game_folder OPT_max_shared_memory OPT_max_workers OPT_manifest OPT_old_manifest OPT_delta_manifest OPT_base_url OPT_force OPT_disable_patching OPT_download_only OPT_update_only OPT_dlm_debug OPT_exclude OPT_install_tag OPT_enable_reordering OPT_dl_timeout OPT_save_path OPT_repair OPT_repair_and_update OPT_ignore_free_space OPT_disable_delta_manifest OPT_reset_sdl OPT_skip_sdl OPT_disable_sdl OPT_preferred_cdn OPT_no_https OPT_bind OPT_skip_version_check OPT_override_username OPT_dry_run OPT_language OPT_wrapper OPT_set_defaults OPT_reset_defaults OPT_override_exe OPT_wine OPT_wine_prefix OPT_no_wine OPT_include_ue OPT_third_party OPT_csv OPT_tsv OPT_force_refresh OPT_force_download OPT_hashlist OPT_check_updates OPT_show_dirs OPT_skip_move OPT_skip_upload OPT_skip_download OPT_force_upload OPT_disable_filters OPT_keep_files OPT_skip_uninstaller

  _legendary_parse_commandline

  local COMP_WORDBREAKS=''

  if (( 0 < POSITIONAL_NUM )); then
    case "${POSITIONALS[0]}" in
      activate) _legendary_activate && return 0 || return 1;;
      alias) _legendary_alias && return 0 || return 1;;
      auth) _legendary_auth && return 0 || return 1;;
      clean-saves) _legendary_clean_saves && return 0 || return 1;;
      cleanup) _legendary_cleanup && return 0 || return 1;;
      crossover) _legendary_crossover && return 0 || return 1;;
      download-saves) _legendary_download_saves && return 0 || return 1;;
      egl-sync) _legendary_egl_sync && return 0 || return 1;;
      eos-overlay) _legendary_eos_overlay && return 0 || return 1;;
      import|import-game) _legendary_import && return 0 || return 1;;
      info) _legendary_info && return 0 || return 1;;
      install|download|update|repair) _legendary_install && return 0 || return 1;;
      launch) _legendary_launch && return 0 || return 1;;
      list|list-games) _legendary_list && return 0 || return 1;;
      list-files) _legendary_list_files && return 0 || return 1;;
      list-installed) _legendary_list_installed && return 0 || return 1;;
      list-saves) _legendary_list_saves && return 0 || return 1;;
      move) _legendary_move && return 0 || return 1;;
      status) _legendary_status && return 0 || return 1;;
      sync-saves) _legendary_sync_saves && return 0 || return 1;;
      uninstall) _legendary_uninstall && return 0 || return 1;;
      verify|verify-game) _legendary_verify && return 0 || return 1;;
    esac
  fi

  __complete_option() {
    local opt="$1" cur="$2" mode="$3"

    case "$opt" in
      --api-timeout|-A)
        return 0;;
    esac

    return 1
  }

  case "$prev" in
    --*)
      __complete_option "$prev" "$cur" WITHOUT_OPTIONAL && return 0;;
    -*)
      case "$prev" in -*([hHVvyJ])[A])
        __complete_option "-${prev: -1}" "$cur" WITHOUT_OPTIONAL && return 0
      esac;;
  esac

  case "$cur" in
    --*=*)
      __complete_option "${cur%%=*}" "${cur#*=}" WITH_OPTIONAL && return 0;;
    -*=*);;
    --*);;
    -*)
        local i
        for ((i=2; i <= ${#cur}; ++i)); do
          local pre="${cur:0:$i}" value="${cur:$i}"
        done;;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_help[@]} && ! ${#OPT_full_help[@]} && ! ${#OPT_version[@]} )) && opts+=(-h --help)
    (( ! ${#OPT_help[@]} && ! ${#OPT_full_help[@]} && ! ${#OPT_version[@]} )) && opts+=(-H --full-help)
    (( ! ${#OPT_help[@]} && ! ${#OPT_full_help[@]} && ! ${#OPT_version[@]} )) && opts+=(-V --version)
    (( ! ${#OPT_help[@]} && ! ${#OPT_full_help[@]} && ! ${#OPT_version[@]} && ! ${#OPT_debug[@]} )) && opts+=(-v --debug)
    (( ! ${#OPT_help[@]} && ! ${#OPT_full_help[@]} && ! ${#OPT_version[@]} && ! ${#OPT_yes[@]} )) && opts+=(-y --yes)
    (( ! ${#OPT_help[@]} && ! ${#OPT_full_help[@]} && ! ${#OPT_version[@]} && ! ${#OPT_pretty_json[@]} )) && opts+=(-J --pretty-json)
    (( ! ${#OPT_help[@]} && ! ${#OPT_full_help[@]} && ! ${#OPT_version[@]} && ! ${#OPT_api_timeout[@]} )) && opts+=(-A --api-timeout=)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  (( POSITIONAL_NUM == 1 )) && {
    COMPREPLY=($(compgen -W 'activate alias auth clean-saves cleanup crossover download-saves egl-sync eos-overlay import import-game info install download update repair launch list list-games list-files list-installed list-saves move status sync-saves uninstall verify verify-game' -- "$cur"))
    return 0;
  }

  return 1
}

_legendary_activate() {
  local COMP_WORDBREAKS=''

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_origin[@]} && ! ${#OPT_uplay[@]} )) && opts+=(-U --uplay)
    (( ! ${#OPT_uplay[@]} && ! ${#OPT_origin[@]} )) && opts+=(-O --origin)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  return 1
}

_legendary_alias() {
  local COMP_WORDBREAKS=''

  if (( 1 < POSITIONAL_NUM )); then
    case "${POSITIONALS[1]}" in
      add) _legendary_alias_add && return 0 || return 1;;
      rename) _legendary_alias_rename && return 0 || return 1;;
      remove) _legendary_alias_remove && return 0 || return 1;;
      list) _legendary_alias_list && return 0 || return 1;;
    esac
  fi

  (( POSITIONAL_NUM == 2 )) && {
    COMPREPLY=($(compgen -W 'add rename remove list' -- "$cur"))
    return 0;
  }

  return 1
}

_legendary_alias_add() {
  local COMP_WORDBREAKS=''

  (( POSITIONAL_NUM == 3 )) && {
    _legendary_exec _legendary_list_installed_games
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_aliases
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    return 0;
  }

  (( POSITIONAL_NUM == 4 )) && {
    return 0;
  }

  return 1
}

_legendary_alias_rename() {
  local COMP_WORDBREAKS=''

  (( POSITIONAL_NUM == 3 )) && {
    _legendary_exec _legendary_list_aliases
    return 0;
  }

  (( POSITIONAL_NUM == 4 )) && {
    return 0;
  }

  return 1
}

_legendary_alias_remove() {
  local COMP_WORDBREAKS=''

  (( POSITIONAL_NUM == 3 )) && {
    _legendary_exec _legendary_list_aliases
    return 0;
  }

  return 1
}

_legendary_alias_list() {
  local COMP_WORDBREAKS=''

  (( POSITIONAL_NUM == 3 )) && {
    _legendary_exec _legendary_list_installed_games
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_aliases
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    return 0;
  }

  return 1
}

_legendary_auth() {
  local COMP_WORDBREAKS=''

  __complete_option() {
    local opt="$1" cur="$2" mode="$3"

    case "$opt" in
      --code|--token|--sid)
        return 0;;
    esac

    return 1
  }

  case "$prev" in
    --*)
      __complete_option "$prev" "$cur" WITHOUT_OPTIONAL && return 0;;
    -*);;
  esac

  case "$cur" in
    --*=*)
      __complete_option "${cur%%=*}" "${cur#*=}" WITH_OPTIONAL && return 0;;
    -*=*);;
    --*);;
    -*);;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_import[@]} )) && opts+=(--import)
    (( ! ${#OPT_code[@]} )) && opts+=(--code=)
    (( ! ${#OPT_token[@]} )) && opts+=(--token=)
    (( ! ${#OPT_sid[@]} )) && opts+=(--sid=)
    (( ! ${#OPT_delete[@]} )) && opts+=(--delete)
    (( ! ${#OPT_disable_webview[@]} )) && opts+=(--disable-webview)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  return 1
}

_legendary_clean_saves() {
  local COMP_WORDBREAKS=''

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_delete_incomplete[@]} )) && opts+=(--delete-incomplete)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  (( POSITIONAL_NUM == 2 )) && {
    _legendary_exec _legendary_list_installed_games
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_aliases
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    return 0;
  }

  return 1
}

_legendary_cleanup() {
  local COMP_WORDBREAKS=''

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_keep_manifests[@]} )) && opts+=(--keep-manifests)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  return 1
}

_legendary_crossover() {
  local COMP_WORDBREAKS=''

  __complete_option() {
    local opt="$1" cur="$2" mode="$3"

    case "$opt" in
      --crossover-app)
        _filedir
        return 0;;
      --crossover-bottle)
        return 0;;
    esac

    return 1
  }

  case "$prev" in
    --*)
      __complete_option "$prev" "$cur" WITHOUT_OPTIONAL && return 0;;
    -*);;
  esac

  case "$cur" in
    --*=*)
      __complete_option "${cur%%=*}" "${cur#*=}" WITH_OPTIONAL && return 0;;
    -*=*);;
    --*);;
    -*);;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_reset[@]} )) && opts+=(--reset)
    (( ! ${#OPT_download[@]} )) && opts+=(--download)
    (( ! ${#OPT_ignore_version[@]} )) && opts+=(--ignore-version)
    (( ! ${#OPT_crossover_app[@]} )) && opts+=(--crossover-app=)
    (( ! ${#OPT_crossover_bottle[@]} )) && opts+=(--crossover-bottle=)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  (( POSITIONAL_NUM == 2 )) && {
    _legendary_exec _legendary_list_installed_games
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_aliases
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    return 0;
  }

  return 1
}

_legendary_download_saves() {
  local COMP_WORDBREAKS=''

  (( POSITIONAL_NUM == 2 )) && {
    _legendary_exec _legendary_list_installed_games
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_aliases
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    return 0;
  }

  return 1
}

_legendary_egl_sync() {
  local COMP_WORDBREAKS=''

  __complete_option() {
    local opt="$1" cur="$2" mode="$3"

    case "$opt" in
      --egl-manifest-path|--egl-wine-prefix)
        _filedir -d
        return 0;;
    esac

    return 1
  }

  case "$prev" in
    --*)
      __complete_option "$prev" "$cur" WITHOUT_OPTIONAL && return 0;;
    -*);;
  esac

  case "$cur" in
    --*=*)
      __complete_option "${cur%%=*}" "${cur#*=}" WITH_OPTIONAL && return 0;;
    -*=*);;
    --*);;
    -*);;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_egl_manifest_path[@]} )) && opts+=(--egl-manifest-path=)
    (( ! ${#OPT_egl_wine_prefix[@]} )) && opts+=(--egl-wine-prefix=)
    (( ! ${#OPT_enable_sync[@]} )) && opts+=(--enable-sync)
    (( ! ${#OPT_disable_sync[@]} )) && opts+=(--disable-sync)
    (( ! ${#OPT_one_shot[@]} )) && opts+=(--one-shot)
    (( ! ${#OPT_import_only[@]} )) && opts+=(--import-only)
    (( ! ${#OPT_export_only[@]} )) && opts+=(--export-only)
    (( ! ${#OPT_migrate[@]} )) && opts+=(--migrate)
    (( ! ${#OPT_unlink[@]} )) && opts+=(--unlink)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  return 1
}

_legendary_eos_overlay() {
  local COMP_WORDBREAKS=''

  __complete_option() {
    local opt="$1" cur="$2" mode="$3"

    case "$opt" in
      --path)
        _filedir -d
        return 0;;
      --prefix)
        return 0;;
      --app)
        _legendary_exec _legendary_list_installed_games
        local COMPREPLY_OLD=("${COMPREPLY[@]}")
        _legendary_exec _legendary_list_aliases
        COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
        return 0;;
    esac

    return 1
  }

  case "$prev" in
    --*)
      __complete_option "$prev" "$cur" WITHOUT_OPTIONAL && return 0;;
    -*);;
  esac

  case "$cur" in
    --*=*)
      __complete_option "${cur%%=*}" "${cur#*=}" WITH_OPTIONAL && return 0;;
    -*=*);;
    --*);;
    -*);;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_path[@]} )) && opts+=(--path=)
    (( ! ${#OPT_prefix[@]} )) && opts+=(--prefix=)
    (( ! ${#OPT_app[@]} )) && opts+=(--app=)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  (( POSITIONAL_NUM == 2 )) && {
    COMPREPLY=($(compgen -W 'install update remove enable disable info' -- "$cur"))
    return 0;
  }

  return 1
}

_legendary_import() {
  local COMP_WORDBREAKS=''

  __complete_option() {
    local opt="$1" cur="$2" mode="$3"

    case "$opt" in
      --platform)
        COMPREPLY=($(compgen -W 'Linux Mac Windows' -- "$cur"))
        return 0;;
    esac

    return 1
  }

  case "$prev" in
    --*)
      __complete_option "$prev" "$cur" WITHOUT_OPTIONAL && return 0;;
    -*);;
  esac

  case "$cur" in
    --*=*)
      __complete_option "${cur%%=*}" "${cur#*=}" WITH_OPTIONAL && return 0;;
    -*=*);;
    --*);;
    -*);;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_disable_check[@]} )) && opts+=(--disable-check)
    (( ! ${#OPT_with_dlcs[@]} )) && opts+=(--with-dlcs)
    (( ! ${#OPT_skip_dlcs[@]} )) && opts+=(--skip-dlcs)
    (( ! ${#OPT_platform[@]} )) && opts+=(--platform=)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  (( POSITIONAL_NUM == 2 )) && {
    _legendary_exec _legendary_list_installed_games
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_aliases
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    return 0;
  }

  (( POSITIONAL_NUM == 3 )) && {
    _filedir -d
    return 0;
  }

  return 1
}

_legendary_info() {
  local COMP_WORDBREAKS=''

  __complete_option() {
    local opt="$1" cur="$2" mode="$3"

    case "$opt" in
      --platform)
        COMPREPLY=($(compgen -W 'installed Linux Mac Windows' -- "$cur"))
        return 0;;
    esac

    return 1
  }

  case "$prev" in
    --*)
      __complete_option "$prev" "$cur" WITHOUT_OPTIONAL && return 0;;
    -*);;
  esac

  case "$cur" in
    --*=*)
      __complete_option "${cur%%=*}" "${cur#*=}" WITH_OPTIONAL && return 0;;
    -*=*);;
    --*);;
    -*);;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_offline[@]} )) && opts+=(--offline)
    (( ! ${#OPT_json[@]} )) && opts+=(--json)
    (( ! ${#OPT_platform[@]} )) && opts+=(--platform=)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  (( POSITIONAL_NUM == 2 )) && {
    _legendary_exec _legendary_list_installed_games
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_aliases
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _filedir
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    return 0;
  }

  return 1
}

_legendary_install() {
  local COMP_WORDBREAKS=''

  __complete_option() {
    local opt="$1" cur="$2" mode="$3"

    case "$opt" in
      --base-path|--game-folder|--save-path)
        _filedir -d
        return 0;;
      --max-shared-memory|--max-workers|--manifest|--old-manifest|--delta-manifest|--base-url|--prefix|--exclude|--install-tag|--dl-timeout|--preferred-cdn|--bind)
        return 0;;
      --platform)
        COMPREPLY=($(compgen -W 'Linux Mac Windows' -- "$cur"))
        return 0;;
    esac

    return 1
  }

  case "$prev" in
    --*)
      __complete_option "$prev" "$cur" WITHOUT_OPTIONAL && return 0;;
    -*);;
  esac

  case "$cur" in
    --*=*)
      __complete_option "${cur%%=*}" "${cur#*=}" WITH_OPTIONAL && return 0;;
    -*=*);;
    --*);;
    -*);;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_base_path[@]} )) && opts+=(--base-path=)
    (( ! ${#OPT_game_folder[@]} )) && opts+=(--game-folder=)
    (( ! ${#OPT_max_shared_memory[@]} )) && opts+=(--max-shared-memory=)
    (( ! ${#OPT_max_workers[@]} )) && opts+=(--max-workers=)
    (( ! ${#OPT_manifest[@]} )) && opts+=(--manifest=)
    (( ! ${#OPT_old_manifest[@]} )) && opts+=(--old-manifest=)
    (( ! ${#OPT_delta_manifest[@]} )) && opts+=(--delta-manifest=)
    (( ! ${#OPT_base_url[@]} )) && opts+=(--base-url=)
    (( ! ${#OPT_force[@]} )) && opts+=(--force)
    (( ! ${#OPT_disable_patching[@]} )) && opts+=(--disable-patching)
    (( ! ${#OPT_download_only[@]} )) && opts+=(--download-only --no-install)
    (( ! ${#OPT_update_only[@]} )) && opts+=(--update-only)
    (( ! ${#OPT_dlm_debug[@]} )) && opts+=(--dlm-debug)
    (( ! ${#OPT_platform[@]} )) && opts+=(--platform=)
    (( ! ${#OPT_prefix[@]} )) && opts+=(--prefix=)
    (( ! ${#OPT_exclude[@]} )) && opts+=(--exclude=)
    (( ! ${#OPT_install_tag[@]} )) && opts+=(--install-tag=)
    (( ! ${#OPT_enable_reordering[@]} )) && opts+=(--enable-reordering)
    (( ! ${#OPT_dl_timeout[@]} )) && opts+=(--dl-timeout=)
    (( ! ${#OPT_save_path[@]} )) && opts+=(--save-path=)
    (( ! ${#OPT_repair[@]} )) && opts+=(--repair)
    (( ! ${#OPT_repair_and_update[@]} )) && opts+=(--repair-and-update)
    (( ! ${#OPT_ignore_free_space[@]} )) && opts+=(--ignore-free-space)
    (( ! ${#OPT_disable_delta_manifest[@]} )) && opts+=(--disable-delta-manifest)
    (( ! ${#OPT_reset_sdl[@]} )) && opts+=(--reset-sdl)
    (( ! ${#OPT_skip_sdl[@]} )) && opts+=(--skip-sdl)
    (( ! ${#OPT_disable_sdl[@]} )) && opts+=(--disable-sdl)
    (( ! ${#OPT_preferred_cdn[@]} )) && opts+=(--preferred-cdn=)
    (( ! ${#OPT_no_https[@]} )) && opts+=(--no-https)
    (( ! ${#OPT_with_dlcs[@]} )) && opts+=(--with-dlcs)
    (( ! ${#OPT_skip_dlcs[@]} )) && opts+=(--skip-dlcs)
    (( ! ${#OPT_bind[@]} )) && opts+=(--bind=)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  (( POSITIONAL_NUM == 2 )) && {
    _legendary_exec _legendary_list_available_games
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_installed_games
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_aliases
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    return 0;
  }

  return 1
}

_legendary_launch() {
  local COMP_WORDBREAKS=''

  __complete_option() {
    local opt="$1" cur="$2" mode="$3"

    case "$opt" in
      --override-username|--language)
        return 0;;
      --wrapper)
        COMPREPLY=($(compgen -A command -- "$cur"))
        return 0;;
      --override-exe|--wine)
        _filedir
        return 0;;
      --wine-prefix)
        _filedir -d
        return 0;;
    esac

    return 1
  }

  case "$prev" in
    --*)
      __complete_option "$prev" "$cur" WITHOUT_OPTIONAL && return 0;;
    -*);;
  esac

  case "$cur" in
    --*=*)
      __complete_option "${cur%%=*}" "${cur#*=}" WITH_OPTIONAL && return 0;;
    -*=*);;
    --*);;
    -*);;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_offline[@]} )) && opts+=(--offline)
    (( ! ${#OPT_skip_version_check[@]} )) && opts+=(--skip-version-check)
    (( ! ${#OPT_override_username[@]} )) && opts+=(--override-username=)
    (( ! ${#OPT_dry_run[@]} )) && opts+=(--dry-run)
    (( ! ${#OPT_language[@]} )) && opts+=(--language=)
    (( ! ${#OPT_wrapper[@]} )) && opts+=(--wrapper=)
    (( ! ${#OPT_set_defaults[@]} )) && opts+=(--set-defaults)
    (( ! ${#OPT_reset_defaults[@]} )) && opts+=(--reset-defaults)
    (( ! ${#OPT_override_exe[@]} )) && opts+=(--override-exe=)
    (( ! ${#OPT_origin[@]} )) && opts+=(--origin)
    (( ! ${#OPT_json[@]} )) && opts+=(--json)
    (( ! ${#OPT_wine[@]} )) && opts+=(--wine=)
    (( ! ${#OPT_wine_prefix[@]} )) && opts+=(--wine-prefix=)
    (( ! ${#OPT_no_wine[@]} )) && opts+=(--no-wine)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  (( POSITIONAL_NUM == 2 )) && {
    _legendary_exec _legendary_list_installed_games
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_aliases
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    return 0;
  }

  return 1
}

_legendary_list() {
  local COMP_WORDBREAKS=''

  __complete_option() {
    local opt="$1" cur="$2" mode="$3"

    case "$opt" in
      --platform)
        COMPREPLY=($(compgen -W 'Linux Mac Windows' -- "$cur"))
        return 0;;
    esac

    return 1
  }

  case "$prev" in
    --*)
      __complete_option "$prev" "$cur" WITHOUT_OPTIONAL && return 0;;
    -*);;
  esac

  case "$cur" in
    --*=*)
      __complete_option "${cur%%=*}" "${cur#*=}" WITH_OPTIONAL && return 0;;
    -*=*);;
    --*);;
    -*);;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_platform[@]} )) && opts+=(--platform=)
    (( ! ${#OPT_include_ue[@]} )) && opts+=(--include-ue)
    (( ! ${#OPT_third_party[@]} )) && opts+=(-T --third-party --include-non-installable)
    (( ! ${#OPT_csv[@]} )) && opts+=(--csv)
    (( ! ${#OPT_tsv[@]} )) && opts+=(--tsv)
    (( ! ${#OPT_json[@]} )) && opts+=(--json)
    (( ! ${#OPT_force_refresh[@]} )) && opts+=(--force-refresh)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  return 1
}

_legendary_list_files() {
  local COMP_WORDBREAKS=''

  __complete_option() {
    local opt="$1" cur="$2" mode="$3"

    case "$opt" in
      --platform)
        COMPREPLY=($(compgen -W 'Linux Mac Windows' -- "$cur"))
        return 0;;
      --manifest)
        _filedir -d
        return 0;;
      --install-tag)
        return 0;;
    esac

    return 1
  }

  case "$prev" in
    --*)
      __complete_option "$prev" "$cur" WITHOUT_OPTIONAL && return 0;;
    -*);;
  esac

  case "$cur" in
    --*=*)
      __complete_option "${cur%%=*}" "${cur#*=}" WITH_OPTIONAL && return 0;;
    -*=*);;
    --*);;
    -*);;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_force_download[@]} )) && opts+=(--force-download)
    (( ! ${#OPT_platform[@]} )) && opts+=(--platform=)
    (( ! ${#OPT_manifest[@]} )) && opts+=(--manifest=)
    (( ! ${#OPT_csv[@]} )) && opts+=(--csv)
    (( ! ${#OPT_tsv[@]} )) && opts+=(--tsv)
    (( ! ${#OPT_json[@]} )) && opts+=(--json)
    (( ! ${#OPT_hashlist[@]} )) && opts+=(--hashlist)
    (( ! ${#OPT_install_tag[@]} )) && opts+=(--install-tag=)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  (( POSITIONAL_NUM == 2 )) && {
    _legendary_exec _legendary_list_installed_games
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_aliases
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    return 0;
  }

  return 1
}

_legendary_list_installed() {
  local COMP_WORDBREAKS=''

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_check_updates[@]} )) && opts+=(--check-updates)
    (( ! ${#OPT_csv[@]} )) && opts+=(--csv)
    (( ! ${#OPT_tsv[@]} )) && opts+=(--tsv)
    (( ! ${#OPT_json[@]} )) && opts+=(--json)
    (( ! ${#OPT_show_dirs[@]} )) && opts+=(--show-dirs)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  return 1
}

_legendary_list_saves() {
  local COMP_WORDBREAKS=''

  (( POSITIONAL_NUM == 2 )) && {
    _legendary_exec _legendary_list_installed_games
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_aliases
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    return 0;
  }

  return 1
}

_legendary_move() {
  local COMP_WORDBREAKS=''

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_skip_move[@]} )) && opts+=(--skip-move)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  (( POSITIONAL_NUM == 2 )) && {
    _legendary_exec _legendary_list_installed_games
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_aliases
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    return 0;
  }

  (( POSITIONAL_NUM == 3 )) && {
    _filedir -d
    return 0;
  }

  return 1
}

_legendary_status() {
  local COMP_WORDBREAKS=''

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_offline[@]} )) && opts+=(--offline)
    (( ! ${#OPT_json[@]} )) && opts+=(--json)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  return 1
}

_legendary_sync_saves() {
  local COMP_WORDBREAKS=''

  __complete_option() {
    local opt="$1" cur="$2" mode="$3"

    case "$opt" in
      --save-path)
        _filedir
        return 0;;
    esac

    return 1
  }

  case "$prev" in
    --*)
      __complete_option "$prev" "$cur" WITHOUT_OPTIONAL && return 0;;
    -*);;
  esac

  case "$cur" in
    --*=*)
      __complete_option "${cur%%=*}" "${cur#*=}" WITH_OPTIONAL && return 0;;
    -*=*);;
    --*);;
    -*);;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_skip_upload[@]} )) && opts+=(--skip-upload)
    (( ! ${#OPT_skip_download[@]} )) && opts+=(--skip-download)
    (( ! ${#OPT_force_upload[@]} )) && opts+=(--force-upload)
    (( ! ${#OPT_force_download[@]} )) && opts+=(--force-download)
    (( ! ${#OPT_save_path[@]} )) && opts+=(--save-path=)
    (( ! ${#OPT_disable_filters[@]} )) && opts+=(--disable-filters)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  (( POSITIONAL_NUM == 2 )) && {
    _legendary_exec _legendary_list_installed_games
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_aliases
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    return 0;
  }

  return 1
}

_legendary_uninstall() {
  local COMP_WORDBREAKS=''

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a opts
    (( ! ${#OPT_keep_files[@]} )) && opts+=(--keep-files)
    (( ! ${#OPT_skip_uninstaller[@]} )) && opts+=(--skip-uninstaller)
    COMPREPLY+=($(compgen -W "${opts[*]}" -- "$cur"))
    [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    return 1
  fi

  (( POSITIONAL_NUM == 2 )) && {
    _legendary_exec _legendary_list_installed_games
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_aliases
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    return 0;
  }

  return 1
}

_legendary_verify() {
  local COMP_WORDBREAKS=''

  (( POSITIONAL_NUM == 2 )) && {
    _legendary_exec _legendary_list_installed_games
    local COMPREPLY_OLD=("${COMPREPLY[@]}")
    _legendary_exec _legendary_list_aliases
    COMPREPLY=("${COMPREPLY_OLD[@]}" "${COMPREPLY[@]}")
    return 0;
  }

  return 1
}

complete -F _legendary legendary

# vim: ft=sh ts=2 sts=2 sw=2 et