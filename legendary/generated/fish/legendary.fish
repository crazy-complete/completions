# This script was generated by crazy-complete.
# crazy-complete: A tool that creates robust and reliable autocompletion scripts for Bash, Fish and Zsh.
# For more information, visit: https://github.com/crazy-complete/crazy-complete

function _legendary_list_aliases
  set -l line

  command legendary alias list 2>/dev/null | begin
    builtin read line
    while builtin read line
      set line (string trim -l -c ' -' -- $line)
      string replace ' => ' \t $line
    end
  end
end

function _legendary_list_installed_games
  set -l line

  command legendary list-installed --tsv 2>/dev/null | begin
    builtin read line
    while builtin read line
      set -l split (string split -- \t "$line")
      builtin printf '%s\t%s\n' $split[1] $split[2]
    end
  end
end

function _legendary_list_available_games
  set -l line

  command legendary list --tsv 2>/dev/null | begin
    builtin read line
    while builtin read line
      set -l split (string split -- \t "$line")
      builtin printf '%s\t%s\n' $split[1] $split[2]
    end
  end
end

function _legendary__command
  printf '%s\t%s\n' \
    activate 'Activate games on third party launchers' \
    alias 'Manage aliases' \
    auth 'Authenticate with the Epic Games Store' \
    clean-saves 'Clean cloud saves' \
    cleanup 'Remove old temporary, metadata, and manifest files' \
    crossover 'Setup CrossOver for launching games (macOS only)' \
    download-saves 'Download all cloud saves' \
    egl-sync 'Setup or run Epic Games Launcher sync' \
    eos-overlay 'Manage EOS Overlay install' \
    import 'Import an already installed game' \
    import-game 'Import an already installed game' \
    info 'Prints info about specified app name or manifest' \
    install 'Install a game' \
    download 'Install a game' \
    update 'Install a game' \
    repair 'Install a game' \
    launch 'Launch a game' \
    list 'List available (installable) games' \
    list-games 'List available (installable) games' \
    list-files 'List files in manifest' \
    list-installed 'List installed games' \
    list-saves 'List available cloud saves' \
    move 'Move specified app name to a new location' \
    status 'Show legendary status information' \
    sync-saves 'Sync cloud saves' \
    uninstall 'Uninstall (delete) a game' \
    verify "Verify a game's local files" \
    verify-game "Verify a game's local files"
end

function _legendary_fish_query
  # ===========================================================================
  #
  # This function implements the parsing of options and positionals in the Fish shell.
  #
  # Usage: __fish_query <OPTIONS> <COMMAND> [ARGS...]
  #
  # The first argument is a comma-separated list of options that the parser should know about.
  # Short options (-o), long options (--option), and old-style options (-option) are supported.
  #
  # If an option takes an argument, it is suffixed by '='.
  # If an option takes an optional argument, it is suffixed by '=?'.
  #
  # For example:
  #   __fish_query '-f,--flag,-old-style,--with-arg=,--with-optional=?' [...]
  #
  #   Here, -f, --flag and -old-style don't take options, --with-arg requires an
  #   argument and --with-optional takes an optional argument.
  #
  # COMMANDS
  #   positional_contains <NUM> <WORDS...>
  #     Checks if the positional argument number NUM is one of WORDS.
  #     NUM counts from one.
  #
  #   has_option [WITH_INCOMPLETE] <OPTIONS...>
  #     Checks if an option given in OPTIONS is passed on commandline.
  #     If an option requires an argument, this command returns true only if the
  #     option includes an argument. If 'WITH_INCOMPLETE' is specified, it also
  #     returns true for options missing their arguments.
  #
  #   option_is <OPTIONS...> -- <VALUES...>
  #     Checks if any option in OPTIONS has a value of VALUES.
  #
  #   num_of_positionals [<OPERATOR> <NUMBER>]
  #     Checks the number of positional arguments.
  #     If no arguments are provided, print the total count of positional arguments.
  #     If two arguments are provided, the first argument should be one of
  #     the comparison operators: '-lt', '-le', '-eq', '-ne', '-gt', '-ge'.
  #     Returns 0 if the count of positional arguments matches the
  #     specified NUMBER according to the comparison operator, otherwise returns 1.
  #
  # ===========================================================================

  set -l positionals
  set -l having_options
  set -l option_values

  set -l options $argv[1]
  set -e argv[1]

  set -l cmd $argv[1]
  set -e argv[1]

  set -l my_cache_key "$(commandline -b) $options"

  if test "$__QUERY_CACHE_KEY" = "$my_cache_key"
    set positionals    $__QUERY_CACHE_POSITIONALS
    set having_options $__QUERY_CACHE_HAVING_OPTIONS
    set option_values  $__QUERY_CACHE_OPTION_VALUES
  else
    # =========================================================================
    # Parsing of OPTIONS argument
    # =========================================================================

    set -l short_opts_with_arg
    set -l short_opts_without_arg
    set -l short_opts_with_optional_arg
    set -l long_opts_with_arg
    set -l long_opts_without_arg
    set -l long_opts_with_optional_arg

    set -l option

    if test -n "$options"
      for option in (string split -- ',' $options)
        if false
          true
        else if string match -qr -- '^--.+=$' $option
          set -a long_opts_with_arg (string replace -- '='  '' $option)
        else if string match -qr -- '^--.+=\?$' $option
          set -a long_opts_with_optional_arg (string replace -- '=?' '' $option)
        else if string match -qr -- '^--.+$' $option
          set -a long_opts_without_arg $option
        else if string match -qr -- '^-.=$' $option
          set -a short_opts_with_arg (string replace -- '='  '' $option)
        else if string match -qr -- '^-.=\?$' $option
          set -a short_opts_with_optional_arg (string replace -- '=?' '' $option)
        else if string match -qr -- '^-.$' $option
          set -a short_opts_without_arg $option
        end
      end
    end

    # =========================================================================
    # Parsing of options and positionals
    # =========================================================================

    set -l cmdline (commandline -poc)
    set -l cmdline_count (count $cmdline)

    set -l argi 2 # cmdline[1] is command name
    while test $argi -le $cmdline_count
      set -l arg "$cmdline[$argi]"
      set -l have_trailing_arg (test $argi -lt $cmdline_count && echo true || echo false)

      switch $arg
        case '-'
          set -a positionals -
        case '--'
          for argi in (seq (math $argi + 1) $cmdline_count)
            set -a positionals $cmdline[$argi]
          end
          break
        case '--*=*'
          set -l split (string split -m 1 -- '=' $arg)
          set -a having_options $split[1]
          set -a option_values "$split[2]"
        case '--*'
          if contains -- $arg $long_opts_with_arg
            if $have_trailing_arg
              set -a having_options $arg
              set -a option_values $cmdline[(math $argi + 1)]
              set argi (math $argi + 1)
            end
          else
            set -a having_options $arg
            set -a option_values ''
          end
        case '-*'
          set -l end_of_parsing false

          set -l arg_length (string length -- $arg)
          set -l i 2
          while not $end_of_parsing; and test $i -le $arg_length
            set -l option "-$(string sub -s $i -l 1 -- $arg)"
            set -l trailing_chars "$(string sub -s (math $i + 1) -- $arg)"

            if contains -- $option $short_opts_without_arg
              set -a having_options $option
              set -a option_values ''
            else if contains -- $option $short_opts_with_arg
              set end_of_parsing true

              if test -n "$trailing_chars"
                set -a having_options $option
                set -a option_values $trailing_chars
              else if $have_trailing_arg
                set -a having_options $option
                set -a option_values $cmdline[(math $argi + 1)]
                set argi (math $argi + 1)
              end
            else if contains -- $option $short_opts_with_optional_arg
              set end_of_parsing true
              set -a having_options $option
              set -a option_values "$trailing_chars" # may be empty
            end

            set i (math $i + 1)
          end
        case '*'
          set -a positionals $arg
      end

      set argi (math $argi + 1)
    end

    set -g __QUERY_CACHE_POSITIONALS    $positionals
    set -g __QUERY_CACHE_HAVING_OPTIONS $having_options
    set -g __QUERY_CACHE_OPTION_VALUES  $option_values
    set -g __QUERY_CACHE_KEY            $my_cache_key
  end

  # ===========================================================================
  # Commands
  # ===========================================================================

  switch $cmd
    case 'positional_contains'
      if test (count $argv) -eq 0
        echo '_legendary_fish_query: positional_contains: argv[3]: missing number' >&2
        return 1
      end

      set -l positional_num $argv[1]
      set -e argv[1]
      contains -- $positionals[$positional_num] $argv && return 0 || return 1
    case 'has_option'
      for option in $having_options
        contains -- $option $argv && return 0
      end

      return 1
    case 'num_of_positionals'
      switch (count $argv)
        case 0
          count $positionals
        case 1
          echo '_legendary_fish_query: num_of_positionals: $argv[1]: missing operand' >&2
          return 1
        case 2
          if contains -- $argv[1] -lt -le -eq -ne -gt -ge;
            test (count $positionals) $argv[1] $argv[2] && return 0 || return 1
          else
            echo '_legendary_fish_query: num_of_positionals: $argv[1]: unknown operator' >&2
            return 1
          end
        case '*'
          echo '_legendary_fish_query: num_of_positionals: too many arguments' >&2
          return 1
      end
  end
end

function _legendary_alias_command
  printf '%s\t%s\n' \
    add 'Add an alias' \
    rename 'Rename an alias' \
    remove 'Remove an alias' \
    list 'List aliases'
end

function _legendary_fish_complete_filedir
  # Function for completing files or directories
  #
  # Options:
  #   -d|--description=DESC   The description for completed entries
  #   -c|--comp=STR           Complete STR instead of current command line argument
  #   -D|--directories        Only complete directories
  #   -C|--cd=DIR             List contents in DIR
  #
  # This function is made out of /usr/share/fish/functions/__fish_complete_directories.fish

  argparse --max-args 0 'd/description=' 'c/comp=' 'D/directories' 'C/cd=' -- $argv || return 1

  set -l comp
  set -l desc

  if set -q _flag_description[1]
    set desc $_flag_description
  else if set -g _flag_directories
    set desc 'Directory'
  end

  if set -q _flag_comp[1]
    set comp $_flag_comp
  else
    set comp (commandline -ct | string replace -r -- '^-[^=]*=' '')
  end

  if set -q _flag_cd[1]
    pushd $_flag_cd || return 1
  end

  set -l files (complete -C"'' $comp")

  if set -q _flag_cd[1]
    popd
  end

  if set -q files[1]
    if set -q _flag_directories[1]
      set files (printf '%s\n' $files | string match -r '.*/$')
    end

    printf '%s\n' $files\t"$desc"
  end
end

set -l prog 'legendary'
set -l query '_legendary_fish_query'

# Delete existing completions
complete -c $prog -e

# Generally disable file completion
complete -c $prog -x

# command legendary
set -l opts "-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "not $query '$opts' has_option -h --help -H --full-help -V --version"
set -l C001 "not $query '$opts' has_option -h --help -H --full-help -V --version -v --debug"
set -l C002 "not $query '$opts' has_option -h --help -H --full-help -V --version -y --yes"
set -l C003 "not $query '$opts' has_option -h --help -H --full-help -V --version -J --pretty-json"
set -l C004 "not $query '$opts' has_option -h --help -H --full-help -V --version -A --api-timeout"
set -l C005 "$query '$opts' num_of_positionals -eq 0"
complete -c $prog -n $C000 -s h -l help -d 'Show this help message and exit' -f
complete -c $prog -n $C000 -s H -l full-help -d 'Show full help (including individual command help)' -f
complete -c $prog -n $C000 -s V -l version -d 'Print version and exit' -f
complete -c $prog -n $C001 -s v -l debug -d 'Set loglevel to debug' -f
complete -c $prog -n $C002 -s y -l yes -d 'Default to yes for all prompts' -f
complete -c $prog -n $C003 -s J -l pretty-json -d 'Pretty-print JSON' -f
complete -c $prog -n $C004 -s A -l api-timeout -d 'API HTTP request timeout (default: 10 seconds)' -x
complete -c $prog -n $C005 -d Commands -f -a '(_legendary__command)'

# command legendary activate
set -l opts "-U,--uplay,-O,--origin,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 activate && not $query '$opts' has_option -O --origin -U --uplay"
set -l C001 "$query '$opts' positional_contains 1 activate && not $query '$opts' has_option -U --uplay -O --origin"
complete -c $prog -n $C000 -s U -l uplay -d 'Activate Uplay/Ubisoft Connect titles on your Ubisoft account (Uplay install not required)' -f
complete -c $prog -n $C001 -s O -l origin -d 'Activate Origin/EA App managed titles on your EA account (requires Origin to be installed)' -f

# command legendary alias
set -l opts "-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 alias && $query '$opts' num_of_positionals -eq 1"
complete -c $prog -n $C000 -d Commands -f -a '(_legendary_alias_command)'

# command legendary alias add
set -l opts "-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 alias && $query '$opts' positional_contains 2 add && $query '$opts' num_of_positionals -eq 2"
set -l C001 "$query '$opts' positional_contains 1 alias && $query '$opts' positional_contains 2 add && $query '$opts' num_of_positionals -eq 3"
complete -c $prog -n $C000 -x -a '(_legendary_list_installed_games; _legendary_list_aliases)'
complete -c $prog -n $C001 -x

# command legendary alias rename
set -l opts "-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 alias && $query '$opts' positional_contains 2 rename && $query '$opts' num_of_positionals -eq 2"
set -l C001 "$query '$opts' positional_contains 1 alias && $query '$opts' positional_contains 2 rename && $query '$opts' num_of_positionals -eq 3"
complete -c $prog -n $C000 -x -a '(_legendary_list_aliases)'
complete -c $prog -n $C001 -x

# command legendary alias remove
set -l opts "-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 alias && $query '$opts' positional_contains 2 remove && $query '$opts' num_of_positionals -eq 2"
complete -c $prog -n $C000 -x -a '(_legendary_list_aliases)'

# command legendary alias list
set -l opts "-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 alias && $query '$opts' positional_contains 2 list && $query '$opts' num_of_positionals -eq 2"
complete -c $prog -n $C000 -x -a '(_legendary_list_installed_games; _legendary_list_aliases)'

# command legendary auth
set -l opts "--import,--code=,--token=,--sid=,--delete,--disable-webview,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 auth && not $query '$opts' has_option --import"
set -l C001 "$query '$opts' positional_contains 1 auth && not $query '$opts' has_option --code"
set -l C002 "$query '$opts' positional_contains 1 auth && not $query '$opts' has_option --token"
set -l C003 "$query '$opts' positional_contains 1 auth && not $query '$opts' has_option --sid"
set -l C004 "$query '$opts' positional_contains 1 auth && not $query '$opts' has_option --delete"
set -l C005 "$query '$opts' positional_contains 1 auth && not $query '$opts' has_option --disable-webview"
complete -c $prog -n $C000 -l import -d 'Import Epic Games Launcher authentication data (logs out of EGL)' -f
complete -c $prog -n $C001 -l code -d 'Use specified authorization code instead of interactive authentication' -x
complete -c $prog -n $C002 -l token -d 'Use specified exchange token instead of interactive authentication' -x
complete -c $prog -n $C003 -l sid -d 'Use specified session id instead of interactive authentication' -x
complete -c $prog -n $C004 -l delete -d 'Remove existing authentication (log out)' -f
complete -c $prog -n $C005 -l disable-webview -d 'Do not use embedded browser for login' -f

# command legendary clean-saves
set -l opts "--delete-incomplete,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 clean-saves && not $query '$opts' has_option --delete-incomplete"
set -l C001 "$query '$opts' positional_contains 1 clean-saves && $query '$opts' num_of_positionals -eq 1"
complete -c $prog -n $C000 -l delete-incomplete -d 'Delete incomplete save files' -f
complete -c $prog -n $C001 -x -a '(_legendary_list_installed_games; _legendary_list_aliases)'

# command legendary cleanup
set -l opts "--keep-manifests,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 cleanup && not $query '$opts' has_option --keep-manifests"
complete -c $prog -n $C000 -l keep-manifests -d 'Do not delete old manifests' -f

# command legendary crossover
set -l opts "--reset,--download,--ignore-version,--crossover-app=,--crossover-bottle=,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 crossover && not $query '$opts' has_option --reset"
set -l C001 "$query '$opts' positional_contains 1 crossover && not $query '$opts' has_option --download"
set -l C002 "$query '$opts' positional_contains 1 crossover && not $query '$opts' has_option --ignore-version"
set -l C003 "$query '$opts' positional_contains 1 crossover && not $query '$opts' has_option --crossover-app"
set -l C004 "$query '$opts' positional_contains 1 crossover && not $query '$opts' has_option --crossover-bottle"
set -l C005 "$query '$opts' positional_contains 1 crossover && $query '$opts' num_of_positionals -eq 1"
complete -c $prog -n $C000 -l reset -d 'Reset default/app-specific crossover configuration' -f
complete -c $prog -n $C001 -l download -d 'Automatically download and set up a preconfigured bottle (experimental)' -f
complete -c $prog -n $C002 -l ignore-version -d 'Disable version check for available bottles when using --download' -f
complete -c $prog -n $C003 -l crossover-app -d 'Specify app to skip interactive selection' -Fr
complete -c $prog -n $C004 -l crossover-bottle -d 'Specify bottle to skip interactive selection' -x
complete -c $prog -n $C005 -x -a '(_legendary_list_installed_games; _legendary_list_aliases)'

# command legendary download-saves
set -l opts "-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 download-saves && $query '$opts' num_of_positionals -eq 1"
complete -c $prog -n $C000 -x -a '(_legendary_list_installed_games; _legendary_list_aliases)'

# command legendary egl-sync
set -l opts "--egl-manifest-path=,--egl-wine-prefix=,--enable-sync,--disable-sync,--one-shot,--import-only,--export-only,--migrate,--unlink,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 egl-sync && not $query '$opts' has_option --egl-manifest-path"
set -l C001 "$query '$opts' positional_contains 1 egl-sync && not $query '$opts' has_option --egl-wine-prefix"
set -l C002 "$query '$opts' positional_contains 1 egl-sync && not $query '$opts' has_option --enable-sync"
set -l C003 "$query '$opts' positional_contains 1 egl-sync && not $query '$opts' has_option --disable-sync"
set -l C004 "$query '$opts' positional_contains 1 egl-sync && not $query '$opts' has_option --one-shot"
set -l C005 "$query '$opts' positional_contains 1 egl-sync && not $query '$opts' has_option --import-only"
set -l C006 "$query '$opts' positional_contains 1 egl-sync && not $query '$opts' has_option --export-only"
set -l C007 "$query '$opts' positional_contains 1 egl-sync && not $query '$opts' has_option --migrate"
set -l C008 "$query '$opts' positional_contains 1 egl-sync && not $query '$opts' has_option --unlink"
complete -c $prog -n $C000 -l egl-manifest-path -d "Path to the Epic Games Launcher's Manifests folder, should point to /ProgramData/Epic/EpicGamesLauncher/Data/Manifests" -x -a '(__fish_complete_directories)'
complete -c $prog -n $C001 -l egl-wine-prefix -d 'Path to the WINE prefix the Epic Games Launcher is installed in' -x -a '(__fish_complete_directories)'
complete -c $prog -n $C002 -l enable-sync -d 'Enable automatic EGL <-> Legendary sync' -f
complete -c $prog -n $C003 -l disable-sync -d 'Disable automatic sync and exit' -f
complete -c $prog -n $C004 -l one-shot -d 'Sync once, do not ask to setup automatic sync' -f
complete -c $prog -n $C005 -l import-only -d 'Only import games from EGL (no export)' -f
complete -c $prog -n $C006 -l export-only -d 'Only export games to EGL (no import)' -f
complete -c $prog -n $C007 -l migrate -d 'Import games into legendary, then remove them from EGL (implies --import-only --one-shot --unlink)' -f
complete -c $prog -n $C008 -l unlink -d 'Disable sync and remove EGL metadata from installed games' -f

# command legendary eos-overlay
set -l opts "--path=,--prefix=,--app=,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 eos-overlay && not $query '$opts' has_option --path"
set -l C001 "$query '$opts' positional_contains 1 eos-overlay && not $query '$opts' has_option --prefix"
set -l C002 "$query '$opts' positional_contains 1 eos-overlay && not $query '$opts' has_option --app"
set -l C003 "$query '$opts' positional_contains 1 eos-overlay && $query '$opts' num_of_positionals -eq 1"
complete -c $prog -n $C000 -l path -d 'Path to the EOS overlay folder to be enabled/installed to.' -x -a '(__fish_complete_directories)'
complete -c $prog -n $C001 -l prefix -d 'WINE prefix to install the overlay in' -x
complete -c $prog -n $C002 -l app -d "Use this app's wine prefix (if configured in config)" -x -a '(_legendary_list_installed_games; _legendary_list_aliases)'
complete -c $prog -n $C003 -x -a 'install update remove enable disable info'

# command legendary import
set -l opts "--disable-check,--with-dlcs,--skip-dlcs,--platform=,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 import import-game && not $query '$opts' has_option --disable-check"
set -l C001 "$query '$opts' positional_contains 1 import import-game && not $query '$opts' has_option --with-dlcs"
set -l C002 "$query '$opts' positional_contains 1 import import-game && not $query '$opts' has_option --skip-dlcs"
set -l C003 "$query '$opts' positional_contains 1 import import-game && not $query '$opts' has_option --platform"
set -l C004 "$query '$opts' positional_contains 1 import import-game && $query '$opts' num_of_positionals -eq 1"
set -l C005 "$query '$opts' positional_contains 1 import import-game && $query '$opts' num_of_positionals -eq 2"
complete -c $prog -n $C000 -l disable-check -d 'Disables completeness check of the to-be-imported game installation (useful if the imported game is a much older version or missing files)' -f
complete -c $prog -n $C001 -l with-dlcs -d 'Automatically attempt to import all DLCs with the base game' -f
complete -c $prog -n $C002 -l skip-dlcs -d 'Do not ask about importing DLCs.' -f
complete -c $prog -n $C003 -l platform -d 'Platform for import (default: Mac on macOS, otherwise Windows)' -x -a 'Linux Mac Windows'
complete -c $prog -n $C004 -x -a '(_legendary_list_installed_games; _legendary_list_aliases)'
complete -c $prog -n $C005 -x -a '(__fish_complete_directories)'

# command legendary info
set -l opts "--offline,--json,--platform=,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 info && not $query '$opts' has_option --offline"
set -l C001 "$query '$opts' positional_contains 1 info && not $query '$opts' has_option --json"
set -l C002 "$query '$opts' positional_contains 1 info && not $query '$opts' has_option --platform"
set -l C003 "$query '$opts' positional_contains 1 info && $query '$opts' num_of_positionals -eq 1"
complete -c $prog -n $C000 -l offline -d 'Only print info available offline' -f
complete -c $prog -n $C001 -l json -d 'Output information in JSON format' -f
complete -c $prog -n $C002 -l platform -d 'Platform to fetch info for (default: installed or Mac on macOS, Windows otherwise)' -x -a 'installed Linux Mac Windows'
complete -c $prog -n $C003 -x -a '(_legendary_list_installed_games; _legendary_list_aliases; _legendary_fish_complete_filedir)'

# command legendary install
set -l opts "--base-path=,--game-folder=,--max-shared-memory=,--max-workers=,--manifest=,--old-manifest=,--delta-manifest=,--base-url=,--force,--disable-patching,--download-only,--no-install,--update-only,--dlm-debug,--platform=,--prefix=,--exclude=,--install-tag=,--enable-reordering,--dl-timeout=,--save-path=,--repair,--repair-and-update,--ignore-free-space,--disable-delta-manifest,--reset-sdl,--skip-sdl,--disable-sdl,--preferred-cdn=,--no-https,--with-dlcs,--skip-dlcs,--bind=,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --base-path"
set -l C001 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --game-folder"
set -l C002 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --max-shared-memory"
set -l C003 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --max-workers"
set -l C004 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --manifest"
set -l C005 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --old-manifest"
set -l C006 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --delta-manifest"
set -l C007 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --base-url"
set -l C008 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --force"
set -l C009 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --disable-patching"
set -l C010 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --download-only --no-install"
set -l C011 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --update-only"
set -l C012 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --dlm-debug"
set -l C013 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --platform"
set -l C014 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --prefix"
set -l C015 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --exclude"
set -l C016 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --install-tag"
set -l C017 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --enable-reordering"
set -l C018 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --dl-timeout"
set -l C019 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --save-path"
set -l C020 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --repair"
set -l C021 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --repair-and-update"
set -l C022 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --ignore-free-space"
set -l C023 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --disable-delta-manifest"
set -l C024 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --reset-sdl"
set -l C025 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --skip-sdl"
set -l C026 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --disable-sdl"
set -l C027 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --preferred-cdn"
set -l C028 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --no-https"
set -l C029 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --with-dlcs"
set -l C030 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --skip-dlcs"
set -l C031 "$query '$opts' positional_contains 1 install download update repair && not $query '$opts' has_option --bind"
set -l C032 "$query '$opts' positional_contains 1 install download update repair && $query '$opts' num_of_positionals -eq 1"
complete -c $prog -n $C000 -l base-path -d 'Path for game installations (defaults to ~/Games)' -x -a '(__fish_complete_directories)'
complete -c $prog -n $C001 -l game-folder -d 'Folder for game installation (defaults to folder specified in metadata)' -x -a '(__fish_complete_directories)'
complete -c $prog -n $C002 -l max-shared-memory -d 'Maximum amount of shared memory to use (in MiB), default: 1 GiB' -x
complete -c $prog -n $C003 -l max-workers -d 'Maximum amount of download workers, default: min(2 * CPUs, 16)' -x
complete -c $prog -n $C004 -l manifest -d 'Manifest URL or path to use instead of the CDN one (e.g. for downgrading)' -x
complete -c $prog -n $C005 -l old-manifest -d 'Manifest URL or path to use as the old one (e.g. for testing patching)' -x
complete -c $prog -n $C006 -l delta-manifest -d 'Manifest URL or path to use as the delta one (e.g. for testing)' -x
complete -c $prog -n $C007 -l base-url -d 'Base URL to download from (e.g. to test or switch to a different CDNs)' -x
complete -c $prog -n $C008 -l force -d 'Download all files / ignore existing (overwrite)' -f
complete -c $prog -n $C009 -l disable-patching -d 'Do not attempt to patch existing installation (download entire changed files)' -f
complete -c $prog -n $C010 -l download-only -l no-install -d 'Do not install app and do not run prerequisite installers after download' -f
complete -c $prog -n $C011 -l update-only -d 'Only update, do not do anything if specified app is not installed' -f
complete -c $prog -n $C012 -l dlm-debug -d "Set download manager and worker processes' loglevel to debug" -f
complete -c $prog -n $C013 -l platform -d 'Platform for install (default: installed or Windows)' -x -a 'Linux Mac Windows'
complete -c $prog -n $C014 -l prefix -d 'Only fetch files whose path starts with <prefix> (case insensitive)' -x
complete -c $prog -n $C015 -l exclude -d 'Exclude files starting with <prefix> (case insensitive)' -x
complete -c $prog -n $C016 -l install-tag -d 'Only download files with the specified install tag' -x
complete -c $prog -n $C017 -l enable-reordering -d 'Enable reordering optimization to reduce RAM requirements during download (may have adverse results for some titles)' -f
complete -c $prog -n $C018 -l dl-timeout -d 'Connection timeout for downloader (default: 10 seconds)' -x
complete -c $prog -n $C019 -l save-path -d 'Set save game path to be used for sync-saves' -x -a '(__fish_complete_directories)'
complete -c $prog -n $C020 -l repair -d 'Repair installed game by checking and redownloading corrupted/missing files' -f
complete -c $prog -n $C021 -l repair-and-update -d 'Update game to the latest version when repairing' -f
complete -c $prog -n $C022 -l ignore-free-space -d 'Do not abort if not enough free space is available' -f
complete -c $prog -n $C023 -l disable-delta-manifest -d 'Do not use delta manifests when updating (may increase download size)' -f
complete -c $prog -n $C024 -l reset-sdl -d 'Reset selective downloading choices (requires repair to download new components)' -f
complete -c $prog -n $C025 -l skip-sdl -d 'Skip SDL prompt and continue with defaults (only required game data)' -f
complete -c $prog -n $C026 -l disable-sdl -d 'Disable selective downloading for title, reset existing configuration (if any)' -f
complete -c $prog -n $C027 -l preferred-cdn -d 'Set the hostname of the preferred CDN to use when available' -x
complete -c $prog -n $C028 -l no-https -d 'Download games via plaintext HTTP (like EGS), e.g. for use with a lan cache' -f
complete -c $prog -n $C029 -l with-dlcs -d 'Automatically install all DLCs with the base game' -f
complete -c $prog -n $C030 -l skip-dlcs -d 'Do not ask about installing DLCs.' -f
complete -c $prog -n $C031 -l bind -d 'Comma-separated list of IPs to bind to for downloading' -x
complete -c $prog -n $C032 -x -a '(_legendary_list_available_games; _legendary_list_installed_games; _legendary_list_aliases)'

# command legendary launch
set -l opts "--offline,--skip-version-check,--override-username=,--dry-run,--language=,--wrapper=,--set-defaults,--reset-defaults,--override-exe=,--origin,--json,--wine=,--wine-prefix=,--no-wine,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 launch && not $query '$opts' has_option --offline"
set -l C001 "$query '$opts' positional_contains 1 launch && not $query '$opts' has_option --skip-version-check"
set -l C002 "$query '$opts' positional_contains 1 launch && not $query '$opts' has_option --override-username"
set -l C003 "$query '$opts' positional_contains 1 launch && not $query '$opts' has_option --dry-run"
set -l C004 "$query '$opts' positional_contains 1 launch && not $query '$opts' has_option --language"
set -l C005 "$query '$opts' positional_contains 1 launch && not $query '$opts' has_option --wrapper"
set -l C006 "$query '$opts' positional_contains 1 launch && not $query '$opts' has_option --set-defaults"
set -l C007 "$query '$opts' positional_contains 1 launch && not $query '$opts' has_option --reset-defaults"
set -l C008 "$query '$opts' positional_contains 1 launch && not $query '$opts' has_option --override-exe"
set -l C009 "$query '$opts' positional_contains 1 launch && not $query '$opts' has_option --origin"
set -l C010 "$query '$opts' positional_contains 1 launch && not $query '$opts' has_option --json"
set -l C011 "$query '$opts' positional_contains 1 launch && not $query '$opts' has_option --wine"
set -l C012 "$query '$opts' positional_contains 1 launch && not $query '$opts' has_option --wine-prefix"
set -l C013 "$query '$opts' positional_contains 1 launch && not $query '$opts' has_option --no-wine"
set -l C014 "$query '$opts' positional_contains 1 launch && $query '$opts' num_of_positionals -eq 1"
complete -c $prog -n $C000 -l offline -d 'Skip login and launch game without online authentication' -f
complete -c $prog -n $C001 -l skip-version-check -d 'Skip version check when launching game in online mode' -f
complete -c $prog -n $C002 -l override-username -d 'Override username used when launching the game (only works with some titles)' -x
complete -c $prog -n $C003 -l dry-run -d 'Print the command line that would have been used to launch the game and exit' -f
complete -c $prog -n $C004 -l language -d 'Override language for game launch (defaults to system locale)' -x
complete -c $prog -n $C005 -l wrapper -d 'Wrapper command to launch game with' -x -a '(__fish_complete_command)'
complete -c $prog -n $C006 -l set-defaults -d 'Save parameters used to launch to config (does not include env vars)' -f
complete -c $prog -n $C007 -l reset-defaults -d 'Reset config settings for app and exit' -f
complete -c $prog -n $C008 -l override-exe -d 'Override executable to launch (relative path)' -Fr
complete -c $prog -n $C009 -l origin -d 'Launch Origin to activate or run the game.' -f
complete -c $prog -n $C010 -l json -d 'Print launch information as JSON and exit' -f
complete -c $prog -n $C011 -l wine -d 'Set WINE binary to use to launch the app' -Fr
complete -c $prog -n $C012 -l wine-prefix -d 'Set WINE prefix to use' -x -a '(__fish_complete_directories)'
complete -c $prog -n $C013 -l no-wine -d 'Do not run game with WINE (e.g. if a wrapper is used)' -f
complete -c $prog -n $C014 -x -a '(_legendary_list_installed_games; _legendary_list_aliases)'

# command legendary list
set -l opts "--platform=,--include-ue,-T,--third-party,--include-non-installable,--csv,--tsv,--json,--force-refresh,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 list list-games && not $query '$opts' has_option --platform"
set -l C001 "$query '$opts' positional_contains 1 list list-games && not $query '$opts' has_option --include-ue"
set -l C002 "$query '$opts' positional_contains 1 list list-games && not $query '$opts' has_option -T --third-party --include-non-installable"
set -l C003 "$query '$opts' positional_contains 1 list list-games && not $query '$opts' has_option --csv"
set -l C004 "$query '$opts' positional_contains 1 list list-games && not $query '$opts' has_option --tsv"
set -l C005 "$query '$opts' positional_contains 1 list list-games && not $query '$opts' has_option --json"
set -l C006 "$query '$opts' positional_contains 1 list list-games && not $query '$opts' has_option --force-refresh"
complete -c $prog -n $C000 -l platform -d 'Platform to fetch game list for (default: Mac on macOS, otherwise Windows)' -x -a 'Linux Mac Windows'
complete -c $prog -n $C001 -l include-ue -d 'Also include Unreal Engine content (Engine/Marketplace) in list' -f
complete -c $prog -n $C002 -s T -l third-party -l include-non-installable -d 'Include apps that are not installable (e.g. that have to be activated on Origin)' -f
complete -c $prog -n $C003 -l csv -d 'List games in CSV format' -f
complete -c $prog -n $C004 -l tsv -d 'List games in TSV format' -f
complete -c $prog -n $C005 -l json -d 'List games in JSON format' -f
complete -c $prog -n $C006 -l force-refresh -d 'Force a refresh of all game metadata' -f

# command legendary list-files
set -l opts "--force-download,--platform=,--manifest=,--csv,--tsv,--json,--hashlist,--install-tag=,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 list-files && not $query '$opts' has_option --force-download"
set -l C001 "$query '$opts' positional_contains 1 list-files && not $query '$opts' has_option --platform"
set -l C002 "$query '$opts' positional_contains 1 list-files && not $query '$opts' has_option --manifest"
set -l C003 "$query '$opts' positional_contains 1 list-files && not $query '$opts' has_option --csv"
set -l C004 "$query '$opts' positional_contains 1 list-files && not $query '$opts' has_option --tsv"
set -l C005 "$query '$opts' positional_contains 1 list-files && not $query '$opts' has_option --json"
set -l C006 "$query '$opts' positional_contains 1 list-files && not $query '$opts' has_option --hashlist"
set -l C007 "$query '$opts' positional_contains 1 list-files && not $query '$opts' has_option --install-tag"
set -l C008 "$query '$opts' positional_contains 1 list-files && $query '$opts' num_of_positionals -eq 1"
complete -c $prog -n $C000 -l force-download -d 'Always download instead of using on-disk manifest' -f
complete -c $prog -n $C001 -l platform -d 'Platform (default: Mac on macOS, otherwise Windows)' -x -a 'Linux Mac Windows'
complete -c $prog -n $C002 -l manifest -d 'Manifest URL or path to use instead of the CDN one' -x -a '(__fish_complete_directories)'
complete -c $prog -n $C003 -l csv -d 'Output in CSV format' -f
complete -c $prog -n $C004 -l tsv -d 'Output in TSV format' -f
complete -c $prog -n $C005 -l json -d 'Output in JSON format' -f
complete -c $prog -n $C006 -l hashlist -d 'Output file hash list in hashcheck/sha1sum -c compatible format' -f
complete -c $prog -n $C007 -l install-tag -d 'Show only files with specified install tag' -x
complete -c $prog -n $C008 -x -a '(_legendary_list_installed_games; _legendary_list_aliases)'

# command legendary list-installed
set -l opts "--check-updates,--csv,--tsv,--json,--show-dirs,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 list-installed && not $query '$opts' has_option --check-updates"
set -l C001 "$query '$opts' positional_contains 1 list-installed && not $query '$opts' has_option --csv"
set -l C002 "$query '$opts' positional_contains 1 list-installed && not $query '$opts' has_option --tsv"
set -l C003 "$query '$opts' positional_contains 1 list-installed && not $query '$opts' has_option --json"
set -l C004 "$query '$opts' positional_contains 1 list-installed && not $query '$opts' has_option --show-dirs"
complete -c $prog -n $C000 -l check-updates -d 'Check for updates for installed games' -f
complete -c $prog -n $C001 -l csv -d 'List games in CSV format' -f
complete -c $prog -n $C002 -l tsv -d 'List games in TSV format' -f
complete -c $prog -n $C003 -l json -d 'List games in JSON format' -f
complete -c $prog -n $C004 -l show-dirs -d 'Print installation directory in output' -f

# command legendary list-saves
set -l opts "-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 list-saves && $query '$opts' num_of_positionals -eq 1"
complete -c $prog -n $C000 -x -a '(_legendary_list_installed_games; _legendary_list_aliases)'

# command legendary move
set -l opts "--skip-move,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 move && not $query '$opts' has_option --skip-move"
set -l C001 "$query '$opts' positional_contains 1 move && $query '$opts' num_of_positionals -eq 1"
set -l C002 "$query '$opts' positional_contains 1 move && $query '$opts' num_of_positionals -eq 2"
complete -c $prog -n $C000 -l skip-move -d 'Only change legendary database, do not move files (e.g. if already moved)' -f
complete -c $prog -n $C001 -x -a '(_legendary_list_installed_games; _legendary_list_aliases)'
complete -c $prog -n $C002 -x -a '(__fish_complete_directories)'

# command legendary status
set -l opts "--offline,--json,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 status && not $query '$opts' has_option --offline"
set -l C001 "$query '$opts' positional_contains 1 status && not $query '$opts' has_option --json"
complete -c $prog -n $C000 -l offline -d 'Only print offline status information, do not login' -f
complete -c $prog -n $C001 -l json -d 'Show status in JSON format' -f

# command legendary sync-saves
set -l opts "--skip-upload,--skip-download,--force-upload,--force-download,--save-path=,--disable-filters,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 sync-saves && not $query '$opts' has_option --skip-upload"
set -l C001 "$query '$opts' positional_contains 1 sync-saves && not $query '$opts' has_option --skip-download"
set -l C002 "$query '$opts' positional_contains 1 sync-saves && not $query '$opts' has_option --force-upload"
set -l C003 "$query '$opts' positional_contains 1 sync-saves && not $query '$opts' has_option --force-download"
set -l C004 "$query '$opts' positional_contains 1 sync-saves && not $query '$opts' has_option --save-path"
set -l C005 "$query '$opts' positional_contains 1 sync-saves && not $query '$opts' has_option --disable-filters"
set -l C006 "$query '$opts' positional_contains 1 sync-saves && $query '$opts' num_of_positionals -eq 1"
complete -c $prog -n $C000 -l skip-upload -d "Only download new saves from cloud, don't upload" -f
complete -c $prog -n $C001 -l skip-download -d "Only upload new saves from cloud, don't download" -f
complete -c $prog -n $C002 -l force-upload -d 'Force upload even if local saves are older' -f
complete -c $prog -n $C003 -l force-download -d 'Force download even if local saves are newer' -f
complete -c $prog -n $C004 -l save-path -d 'Override savegame path (requires single app name to be specified)' -Fr
complete -c $prog -n $C005 -l disable-filters -d 'Disable save game file filtering' -f
complete -c $prog -n $C006 -x -a '(_legendary_list_installed_games; _legendary_list_aliases)'

# command legendary uninstall
set -l opts "--keep-files,--skip-uninstaller,-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 uninstall && not $query '$opts' has_option --keep-files"
set -l C001 "$query '$opts' positional_contains 1 uninstall && not $query '$opts' has_option --skip-uninstaller"
set -l C002 "$query '$opts' positional_contains 1 uninstall && $query '$opts' num_of_positionals -eq 1"
complete -c $prog -n $C000 -l keep-files -d 'Keep files but remove game from Legendary database' -f
complete -c $prog -n $C001 -l skip-uninstaller -d 'Skip running the uninstaller' -f
complete -c $prog -n $C002 -x -a '(_legendary_list_installed_games; _legendary_list_aliases)'

# command legendary verify
set -l opts "-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout="
set -l C000 "$query '$opts' positional_contains 1 verify verify-game && $query '$opts' num_of_positionals -eq 1"
complete -c $prog -n $C000 -x -a '(_legendary_list_installed_games; _legendary_list_aliases)'

# vim: ft=fish ts=2 sts=2 sw=2 et