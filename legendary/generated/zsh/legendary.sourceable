# This script was generated by crazy-complete.
# crazy-complete: A tool that creates robust and reliable autocompletion scripts for Bash, Fish and Zsh.
# For more information, visit: https://github.com/crazy-complete/crazy-complete

_legendary_list_aliases() {
  local line='' tab=$'\t'

  command legendary alias list 2>/dev/null | {
    builtin read line
    while builtin read -r line; do
      line="${line## }"
      line="${line##-}"
      line="${line## }"
      printf "%s\n" "${line// => /$tab}"
    done
  }
}

_legendary_list_installed_games() {
  local line='' name='' title='' trash=''

  command legendary list-installed --tsv 2>/dev/null | {
    builtin read line
    while builtin read -r line; do
      IFS=$'\t' read -r name title trash <<< "$line"
      builtin printf "%s\\t%s\\n" "$name" "$title"
    done
  }
}

_legendary_list_available_games() {
  local line='' name='' title='' trash=''

  command legendary list --tsv 2>/dev/null | {
    builtin read line
    while builtin read -r line; do
      IFS=$'\t' read -r name title trash <<< "$line"
      builtin printf "%s\\t%s\\n" "$name" "$title"
    done
  }
}

_legendary_zsh_query() {
  # ===========================================================================
  #
  # This function is for querying the command line.
  #
  # COMMANDS
  #   init <OPTIONS> <ARGS...>
  #     This is the first call you have to make, otherwise the other commands
  #     won't (successfully) work.
  #
  #     It parses <ARGS> according to <OPTIONS> and stores results in the
  #     variables POSITIONALS, HAVING_OPTIONS and OPTION_VALUES.
  #
  #     The first argument is a comma-separated list of options that the parser
  #     should know about. Short options (-o), long options (--option), and
  #     old-style options (-option) are supported.
  #
  #     If an option takes an argument, it is suffixed by '='.
  #     If an option takes an optional argument, it is suffixed by '=?'.
  #
  #   get_positional <NUM>
  #     Prints out the positional argument number NUM (starting from 1)
  #
  #   has_option [WITH_INCOMPLETE] <OPTIONS...>
  #     Checks if an option given in OPTIONS is passed on commandline.
  #     If an option requires an argument, this command returns true only if the
  #     option includes an argument. If 'WITH_INCOMPLETE' is specified, it also
  #     returns true for options missing their arguments.
  #
  #   option_is <OPTIONS...> -- <VALUES...>
  #     Checks if one option in OPTIONS has a value of VALUES.
  #
  # EXAMPLE
  #   local POSITIONALS HAVING_OPTIONS OPTION_VALUES
  #   zsh_query init '-f,-a=,-optional=?' program_name -f -optional -a foo bar
  #   zsh_query has_option -f
  #   zsh_query option_is -a -- foo
  #
  #   Here, -f is a flag, -a takes an argument, and -optional takes an optional
  #   argument.
  #
  #   Both queries return true.
  #
  # ===========================================================================

  __zsh_query_contains() {
    local arg='' key="$1"; shift
    for arg; do [[ "$key" == "$arg" ]] && return 0; done
    return 1
  }

  local cmd="$1"; shift

  case "$cmd" in
    get_positional)
      if (( $# != 1 )); then
        echo "_legendary_zsh_query: get_positional: takes exactly one argument" >&2
        return 1
      fi

      if test "$1" -eq 0; then
        echo "_legendary_zsh_query: get_positional: positionals start at 1, not 0!" >&2
        return 1
      fi

      printf "%s" "${POSITIONALS[$1]}"
      return 0;;
    init)
      local IFS=','
      local -a options=(${=1})
      unset IFS
      shift;;
    *)
      echo "_legendary_zsh_query: argv[1]: invalid command" >&2
      return 1;;
  esac

  # continuing init...

  # ===========================================================================
  # Parsing of available options
  # ===========================================================================

  local  long_opts_with_arg=()  long_opts_with_optional_arg=()  long_opts_without_arg=()
  local short_opts_with_arg=() short_opts_with_optional_arg=() short_opts_without_arg=()

  local option=''
  for option in "${options[@]}"; do
    case "$option" in
      --?*=)    long_opts_with_arg+=("${option%=}");;
      --?*=\?)  long_opts_with_optional_arg+=("${option%=?}");;
      --?*)     long_opts_without_arg+=("$option");;
      -?=)      short_opts_with_arg+=("${option%=}");;
      -?=\?)    short_opts_with_optional_arg+=("${option%=?}");;
      -?)       short_opts_without_arg+=("$option");;
      *) echo "_legendary_zsh_query: $option: not a valid short, long or oldstyle option" >&2; return 1;;
    esac
  done

  # ===========================================================================
  # Parsing of command line options
  # ===========================================================================

  POSITIONALS=()
  HAVING_OPTIONS=()
  OPTION_VALUES=()
  INCOMPLETE_OPTION=''

  local argi=2 # argi[1] is program name
  for ((; argi <= $#; ++argi)); do
    local arg="${@[$argi]}"
    local have_trailing_arg=$(test $argi -lt $# && echo true || echo false)

    case "$arg" in
      -)
        POSITIONALS+=(-);;
      --)
        for argi in $(command seq $((argi + 1)) $#); do
          POSITIONALS+=("${@[$argi]}")
        done
        break;;
      --*=*)
        HAVING_OPTIONS+=("${arg%%=*}")
        OPTION_VALUES+=("${arg#*=}");;
      --*)
        if __zsh_query_contains "$arg" "${long_opts_with_arg[@]}"; then
          if $have_trailing_arg; then
            HAVING_OPTIONS+=("$arg")
            OPTION_VALUES+=("${@[$((++argi))]}")
          fi
        else
          HAVING_OPTIONS+=("$arg")
          OPTION_VALUES+=("")
        fi
        ;;
      -*)
        local end_of_parsing=0

        local i=1 arg_length=${#arg}
        for ((; ! end_of_parsing && i < arg_length; ++i)); do
          local option="-${arg:$i:1}"
          local trailing_chars="${arg:$((i+1))}"

          if __zsh_query_contains "$option" "${short_opts_without_arg[@]}"; then
            HAVING_OPTIONS+=("$option")
            OPTION_VALUES+=("")
          elif __zsh_query_contains "$option" "${short_opts_with_arg[@]}"; then
            end_of_parsing=1

            if [[ -n "$trailing_chars" ]]; then
              HAVING_OPTIONS+=("$option")
              OPTION_VALUES+=("$trailing_chars")
            elif $have_trailing_arg; then
              HAVING_OPTIONS+=("$option")
              OPTION_VALUES+=("${@[$((++argi))]}")
            fi
          elif __zsh_query_contains "$option" "${short_opts_with_optional_arg[@]}"; then
            end_of_parsing=1
            HAVING_OPTIONS+=("$option")
            OPTION_VALUES+=("$trailing_chars") # may be empty
          fi
        done
        ;;
      *)
        POSITIONALS+=("$arg");;
    esac
  done
}

_legendary__command() {
  local items=(
    activate:'Activate games on third party launchers'
    alias:'Manage aliases'
    auth:'Authenticate with the Epic Games Store'
    clean-saves:'Clean cloud saves'
    cleanup:'Remove old temporary, metadata, and manifest files'
    crossover:'Setup CrossOver for launching games (macOS only)'
    download-saves:'Download all cloud saves'
    egl-sync:'Setup or run Epic Games Launcher sync'
    eos-overlay:'Manage EOS Overlay install'
    import:'Import an already installed game'
    import-game:'Import an already installed game'
    info:'Prints info about specified app name or manifest'
    install:'Install a game'
    download:'Install a game'
    update:'Install a game'
    repair:'Install a game'
    launch:'Launch a game'
    list:'List available (installable) games'
    list-games:'List available (installable) games'
    list-files:'List files in manifest'
    list-installed:'List installed games'
    list-saves:'List available cloud saves'
    move:'Move specified app name to a new location'
    status:'Show legendary status information'
    sync-saves:'Sync cloud saves'
    uninstall:'Uninstall (delete) a game'
    verify:"Verify a game's local files"
    verify-game:"Verify a game's local files"
  )

  _describe -- command items
}

_legendary_alias_command() {
  local items=(
    add:'Add an alias'
    rename:'Rename an alias'
    remove:'Remove an alias'
    list:'List aliases'
  )

  _describe -- command items
}

_legendary_exec() {
  local item='' desc='' describe=()

  while IFS=$'\t' read -r item desc; do
    item="${item//:/\\:}"
    [[ -n "$desc" ]] && describe+=("$item:$desc") || describe+=("$item")
  done < <(eval "$1")

  _describe '' describe
}

_legendary_alias_add_AppName() {
  _alternative \
    '{_legendary_exec _legendary_list_installed_games}' \
    '{_legendary_exec _legendary_list_aliases}'
}

_legendary_info_Appname() {
  _alternative \
    '{_legendary_exec _legendary_list_installed_games}' \
    '{_legendary_exec _legendary_list_aliases}' \
    _files
}

_legendary_install_Appname() {
  _alternative \
    '{_legendary_exec _legendary_list_available_games}' \
    '{_legendary_exec _legendary_list_installed_games}' \
    '{_legendary_exec _legendary_list_aliases}'
}

_legendary() {
  local opts=-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout=
  local HAVING_OPTIONS=() OPTION_VALUES=() POSITIONALS=() INCOMPLETE_OPTION=''
  _legendary_zsh_query init "$opts" "${words[@]}"

  case "$(_legendary_zsh_query get_positional 1)" in
    activate) _legendary_activate; return $?;;
    alias) _legendary_alias; return $?;;
    auth) _legendary_auth; return $?;;
    clean-saves) _legendary_clean_saves; return $?;;
    cleanup) _legendary_cleanup; return $?;;
    crossover) _legendary_crossover; return $?;;
    download-saves) _legendary_download_saves; return $?;;
    egl-sync) _legendary_egl_sync; return $?;;
    eos-overlay) _legendary_eos_overlay; return $?;;
    import|import-game) _legendary_import; return $?;;
    info) _legendary_info; return $?;;
    install|download|update|repair) _legendary_install; return $?;;
    launch) _legendary_launch; return $?;;
    list|list-games) _legendary_list; return $?;;
    list-files) _legendary_list_files; return $?;;
    list-installed) _legendary_list_installed; return $?;;
    list-saves) _legendary_list_saves; return $?;;
    move) _legendary_move; return $?;;
    status) _legendary_status; return $?;;
    sync-saves) _legendary_sync_saves; return $?;;
    uninstall) _legendary_uninstall; return $?;;
    verify|verify-game) _legendary_verify; return $?;;
  esac

  local -a args=(
    '(- *)'{-h,--help}'[Show this help message and exit]'
    '(- *)'{-H,--full-help}'[Show full help (including individual command help)]'
    '(- *)'{-V,--version}'[Print version and exit]'
    '(--debug -v)'{-v,--debug}'[Set loglevel to debug]'
    '(--yes -y)'{-y,--yes}'[Default to yes for all prompts]'
    '(--pretty-json -J)'{-J,--pretty-json}'[Pretty-print JSON]'
    '(--api-timeout -A)'{-A+,--api-timeout=}'[API HTTP request timeout (default\: 10 seconds)]':seconds:_numbers
    1:command1:_legendary__command
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_activate() {
  local -a args=(
    '(--origin -O --uplay -U)'{-U,--uplay}'[Activate Uplay/Ubisoft Connect titles on your Ubisoft account (Uplay install not required)]'
    '(--uplay -U --origin -O)'{-O,--origin}'[Activate Origin/EA App managed titles on your EA account (requires Origin to be installed)]'
    1:command1:_legendary__command
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_alias() {
  local opts=-h,--help,-H,--full-help,-V,--version,-v,--debug,-y,--yes,-J,--pretty-json,-A=,--api-timeout=
  local HAVING_OPTIONS=() OPTION_VALUES=() POSITIONALS=() INCOMPLETE_OPTION=''
  _legendary_zsh_query init "$opts" "${words[@]}"

  case "$(_legendary_zsh_query get_positional 2)" in
    add) _legendary_alias_add; return $?;;
    rename) _legendary_alias_rename; return $?;;
    remove) _legendary_alias_remove; return $?;;
    list) _legendary_alias_list; return $?;;
  esac

  local -a args=(
    1:command1:_legendary__command
    2:command2:_legendary_alias_command
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_alias_add() {
  local -a args=(
    1:command1:_legendary__command
    2:command2:_legendary_alias_command
    3:'App Name':_legendary_alias_add_AppName
    4:Alias:' '
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_alias_rename() {
  local -a args=(
    1:command1:_legendary__command
    2:command2:_legendary_alias_command
    3:'Old Alias':'{_legendary_exec _legendary_list_aliases}'
    4:Alias:' '
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_alias_remove() {
  local -a args=(
    1:command1:_legendary__command
    2:command2:_legendary_alias_command
    3:Alias:'{_legendary_exec _legendary_list_aliases}'
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_alias_list() {
  local -a args=(
    1:command1:_legendary__command
    2:command2:_legendary_alias_command
    3:Alias:_legendary_alias_add_AppName
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_auth() {
  local -a args=(
    '(--import)'--import'[Import Epic Games Launcher authentication data (logs out of EGL)]'
    '(--code)'--code='[Use specified authorization code instead of interactive authentication]':'authorization code':' '
    '(--token)'--token='[Use specified exchange token instead of interactive authentication]':'exchange token':' '
    '(--sid)'--sid='[Use specified session id instead of interactive authentication]':'session id':' '
    '(--delete)'--delete'[Remove existing authentication (log out)]'
    '(--disable-webview)'--disable-webview'[Do not use embedded browser for login]'
    1:command1:_legendary__command
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_clean_saves() {
  local -a args=(
    '(--delete-incomplete)'--delete-incomplete'[Delete incomplete save files]'
    1:command1:_legendary__command
    2:'App name':_legendary_alias_add_AppName
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_cleanup() {
  local -a args=(
    '(--keep-manifests)'--keep-manifests'[Do not delete old manifests]'
    1:command1:_legendary__command
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_crossover() {
  local -a args=(
    '(--reset)'--reset'[Reset default/app-specific crossover configuration]'
    '(--download)'--download'[Automatically download and set up a preconfigured bottle (experimental)]'
    '(--ignore-version)'--ignore-version'[Disable version check for available bottles when using --download]'
    '(--crossover-app)'--crossover-app='[Specify app to skip interactive selection]':'path to .app':_files
    '(--crossover-bottle)'--crossover-bottle='[Specify bottle to skip interactive selection]':'bottle name':' '
    1:command1:_legendary__command
    2:'App name':_legendary_alias_add_AppName
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_download_saves() {
  local -a args=(
    1:command1:_legendary__command
    2:'App name':_legendary_alias_add_AppName
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_egl_sync() {
  local -a args=(
    '(--egl-manifest-path)'--egl-manifest-path="[Path to the Epic Games Launcher's Manifests folder, should point to /ProgramData/Epic/EpicGamesLauncher/Data/Manifests]":EGL_MANIFEST_PATH:_directories
    '(--egl-wine-prefix)'--egl-wine-prefix='[Path to the WINE prefix the Epic Games Launcher is installed in]':EGL_WINE_PREFIX:_directories
    '(--enable-sync)'--enable-sync'[Enable automatic EGL <-> Legendary sync]'
    '(--disable-sync)'--disable-sync'[Disable automatic sync and exit]'
    '(--one-shot)'--one-shot'[Sync once, do not ask to setup automatic sync]'
    '(--import-only)'--import-only'[Only import games from EGL (no export)]'
    '(--export-only)'--export-only'[Only export games to EGL (no import)]'
    '(--migrate)'--migrate'[Import games into legendary, then remove them from EGL (implies --import-only --one-shot --unlink)]'
    '(--unlink)'--unlink'[Disable sync and remove EGL metadata from installed games]'
    1:command1:_legendary__command
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_eos_overlay() {
  local -a args=(
    '(--path)'--path='[Path to the EOS overlay folder to be enabled/installed to.]':PATH:_directories
    '(--prefix)'--prefix='[WINE prefix to install the overlay in]':PREFIX:' '
    '(--app)'--app="[Use this app's wine prefix (if configured in config)]":APP:_legendary_alias_add_AppName
    1:command1:_legendary__command
    2:action:'(install update remove enable disable info)'
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_import() {
  local -a args=(
    '(--disable-check)'--disable-check'[Disables completeness check of the to-be-imported game installation (useful if the imported game is a much older version or missing files)]'
    '(--with-dlcs)'--with-dlcs'[Automatically attempt to import all DLCs with the base game]'
    '(--skip-dlcs)'--skip-dlcs'[Do not ask about importing DLCs.]'
    '(--platform)'--platform='[Platform for import (default\: Mac on macOS, otherwise Windows)]':Platform:'(Linux Mac Windows)'
    1:command1:_legendary__command
    2:'App name':_legendary_alias_add_AppName
    3:'Installation directory':_directories
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_info() {
  local -a args=(
    '(--offline)'--offline'[Only print info available offline]'
    '(--json)'--json'[Output information in JSON format]'
    '(--platform)'--platform='[Platform to fetch info for (default\: installed or Mac on macOS, Windows otherwise)]':Platform:'(installed Linux Mac Windows)'
    1:command1:_legendary__command
    2:'App name':_legendary_info_Appname
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_install() {
  local -a args=(
    '(--base-path)'--base-path='[Path for game installations (defaults to ~/Games)]':path:_directories
    '(--game-folder)'--game-folder='[Folder for game installation (defaults to folder specified in metadata)]':path:_directories
    '(--max-shared-memory)'--max-shared-memory='[Maximum amount of shared memory to use (in MiB), default\: 1 GiB]':size:_numbers
    '(--max-workers)'--max-workers='[Maximum amount of download workers, default\: min(2 * CPUs, 16)]':num:_numbers
    '(--manifest)'--manifest='[Manifest URL or path to use instead of the CDN one (e.g. for downgrading)]':uri:' '
    '(--old-manifest)'--old-manifest='[Manifest URL or path to use as the old one (e.g. for testing patching)]':uri:' '
    '(--delta-manifest)'--delta-manifest='[Manifest URL or path to use as the delta one (e.g. for testing)]':uri:' '
    '(--base-url)'--base-url='[Base URL to download from (e.g. to test or switch to a different CDNs)]':url:' '
    '(--force)'--force'[Download all files / ignore existing (overwrite)]'
    '(--disable-patching)'--disable-patching'[Do not attempt to patch existing installation (download entire changed files)]'
    '(--download-only --no-install)'{--download-only,--no-install}'[Do not install app and do not run prerequisite installers after download]'
    '(--update-only)'--update-only'[Only update, do not do anything if specified app is not installed]'
    '(--dlm-debug)'--dlm-debug"[Set download manager and worker processes' loglevel to debug]"
    '(--platform)'--platform='[Platform for install (default\: installed or Windows)]':Platform:'(Linux Mac Windows)'
    '(--prefix)'--prefix='[Only fetch files whose path starts with <prefix> (case insensitive)]':prefix:' '
    '(--exclude)'--exclude='[Exclude files starting with <prefix> (case insensitive)]':prefix:' '
    '(--install-tag)'--install-tag='[Only download files with the specified install tag]':tag:' '
    '(--enable-reordering)'--enable-reordering'[Enable reordering optimization to reduce RAM requirements during download (may have adverse results for some titles)]'
    '(--dl-timeout)'--dl-timeout='[Connection timeout for downloader (default\: 10 seconds)]':sec:_numbers
    '(--save-path)'--save-path='[Set save game path to be used for sync-saves]':path:_directories
    '(--repair)'--repair'[Repair installed game by checking and redownloading corrupted/missing files]'
    '(--repair-and-update)'--repair-and-update'[Update game to the latest version when repairing]'
    '(--ignore-free-space)'--ignore-free-space'[Do not abort if not enough free space is available]'
    '(--disable-delta-manifest)'--disable-delta-manifest'[Do not use delta manifests when updating (may increase download size)]'
    '(--reset-sdl)'--reset-sdl'[Reset selective downloading choices (requires repair to download new components)]'
    '(--skip-sdl)'--skip-sdl'[Skip SDL prompt and continue with defaults (only required game data)]'
    '(--disable-sdl)'--disable-sdl'[Disable selective downloading for title, reset existing configuration (if any)]'
    '(--preferred-cdn)'--preferred-cdn='[Set the hostname of the preferred CDN to use when available]':hostname:' '
    '(--no-https)'--no-https'[Download games via plaintext HTTP (like EGS), e.g. for use with a lan cache]'
    '(--with-dlcs)'--with-dlcs'[Automatically install all DLCs with the base game]'
    '(--skip-dlcs)'--skip-dlcs'[Do not ask about installing DLCs.]'
    '(--bind)'--bind='[Comma-separated list of IPs to bind to for downloading]':IPs:' '
    1:command1:_legendary__command
    2:'App name':_legendary_install_Appname
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_launch() {
  local -a args=(
    '(--offline)'--offline'[Skip login and launch game without online authentication]'
    '(--skip-version-check)'--skip-version-check'[Skip version check when launching game in online mode]'
    '(--override-username)'--override-username='[Override username used when launching the game (only works with some titles)]':username:' '
    '(--dry-run)'--dry-run'[Print the command line that would have been used to launch the game and exit]'
    '(--language)'--language='[Override language for game launch (defaults to system locale)]':'two letter language code':' '
    '(--wrapper)'--wrapper='[Wrapper command to launch game with]':'wrapper command':_command_names
    '(--set-defaults)'--set-defaults'[Save parameters used to launch to config (does not include env vars)]'
    '(--reset-defaults)'--reset-defaults'[Reset config settings for app and exit]'
    '(--override-exe)'--override-exe='[Override executable to launch (relative path)]':'exe path':_files
    '(--origin)'--origin'[Launch Origin to activate or run the game.]'
    '(--json)'--json'[Print launch information as JSON and exit]'
    '(--wine)'--wine='[Set WINE binary to use to launch the app]':'wine binary':_files
    '(--wine-prefix)'--wine-prefix='[Set WINE prefix to use]':'wine pfx path':_directories
    '(--no-wine)'--no-wine'[Do not run game with WINE (e.g. if a wrapper is used)]'
    1:command1:_legendary__command
    2:'App name':_legendary_alias_add_AppName
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_list() {
  local -a args=(
    '(--platform)'--platform='[Platform to fetch game list for (default\: Mac on macOS, otherwise Windows)]':Platform:'(Linux Mac Windows)'
    '(--include-ue)'--include-ue'[Also include Unreal Engine content (Engine/Marketplace) in list]'
    '(--include-non-installable --third-party -T)'{-T,--third-party,--include-non-installable}'[Include apps that are not installable (e.g. that have to be activated on Origin)]'
    '(--csv)'--csv'[List games in CSV format]'
    '(--tsv)'--tsv'[List games in TSV format]'
    '(--json)'--json'[List games in JSON format]'
    '(--force-refresh)'--force-refresh'[Force a refresh of all game metadata]'
    1:command1:_legendary__command
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_list_files() {
  local -a args=(
    '(--force-download)'--force-download'[Always download instead of using on-disk manifest]'
    '(--platform)'--platform='[Platform (default\: Mac on macOS, otherwise Windows)]':Platform:'(Linux Mac Windows)'
    '(--manifest)'--manifest='[Manifest URL or path to use instead of the CDN one]':uri:_directories
    '(--csv)'--csv'[Output in CSV format]'
    '(--tsv)'--tsv'[Output in TSV format]'
    '(--json)'--json'[Output in JSON format]'
    '(--hashlist)'--hashlist'[Output file hash list in hashcheck/sha1sum -c compatible format]'
    '(--install-tag)'--install-tag='[Show only files with specified install tag]':tag:' '
    1:command1:_legendary__command
    2:'App name':_legendary_alias_add_AppName
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_list_installed() {
  local -a args=(
    '(--check-updates)'--check-updates'[Check for updates for installed games]'
    '(--csv)'--csv'[List games in CSV format]'
    '(--tsv)'--tsv'[List games in TSV format]'
    '(--json)'--json'[List games in JSON format]'
    '(--show-dirs)'--show-dirs'[Print installation directory in output]'
    1:command1:_legendary__command
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_list_saves() {
  local -a args=(
    1:command1:_legendary__command
    2:'App name':_legendary_alias_add_AppName
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_move() {
  local -a args=(
    '(--skip-move)'--skip-move'[Only change legendary database, do not move files (e.g. if already moved)]'
    1:command1:_legendary__command
    2:'App name':_legendary_alias_add_AppName
    3:'New Base Path':_directories
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_status() {
  local -a args=(
    '(--offline)'--offline'[Only print offline status information, do not login]'
    '(--json)'--json'[Show status in JSON format]'
    1:command1:_legendary__command
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_sync_saves() {
  local -a args=(
    '(--skip-upload)'--skip-upload"[Only download new saves from cloud, don't upload]"
    '(--skip-download)'--skip-download"[Only upload new saves from cloud, don't download]"
    '(--force-upload)'--force-upload'[Force upload even if local saves are older]'
    '(--force-download)'--force-download'[Force download even if local saves are newer]'
    '(--save-path)'--save-path='[Override savegame path (requires single app name to be specified)]':path:_files
    '(--disable-filters)'--disable-filters'[Disable save game file filtering]'
    1:command1:_legendary__command
    2:'App name':_legendary_alias_add_AppName
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_uninstall() {
  local -a args=(
    '(--keep-files)'--keep-files'[Keep files but remove game from Legendary database]'
    '(--skip-uninstaller)'--skip-uninstaller'[Skip running the uninstaller]'
    1:command1:_legendary__command
    2:'App name':_legendary_alias_add_AppName
  )
  _arguments -S -s -w "${args[@]}"
}

_legendary_verify() {
  local -a args=(
    1:command1:_legendary__command
    2:'App name':_legendary_alias_add_AppName
  )
  _arguments -S -s -w "${args[@]}"
}

compdef _legendary legendary

# vim: ft=zsh ts=2 sts=2 sw=2 et